=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module OpenAIClient
  class AssistantsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancels a run that is `in_progress`.
    # @param thread_id The ID of the thread to which this run belongs.
    # @param run_id The ID of the run to cancel.
    # @param [Hash] opts the optional parameters
    # @return [RunObject]
    def cancel_run(thread_id, run_id, opts = {})
      data, _status_code, _headers = cancel_run_with_http_info(thread_id, run_id, opts)
      data
    end

    # Cancels a run that is &#x60;in_progress&#x60;.
    # @param thread_id The ID of the thread to which this run belongs.
    # @param run_id The ID of the run to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def cancel_run_with_http_info(thread_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.cancel_run ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.cancel_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AssistantsApi.cancel_run"
      end
      # resource path
      local_var_path = '/threads/{thread_id}/runs/{run_id}/cancel'.sub('{' + 'thread_id' + '}', thread_id.to_s).sub('{' + 'run_id' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RunObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#cancel_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an assistant with a model and instructions.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AssistantObject]
    def create_assistant(body, opts = {})
      data, _status_code, _headers = create_assistant_with_http_info(body, opts)
      data
    end

    # Create an assistant with a model and instructions.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssistantObject, Integer, Hash)>] AssistantObject data, response status code and response headers
    def create_assistant_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.create_assistant ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AssistantsApi.create_assistant"
      end
      # resource path
      local_var_path = '/assistants'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AssistantObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#create_assistant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a message.
    # @param body 
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) to create a message for.
    # @param [Hash] opts the optional parameters
    # @return [MessageObject]
    def create_message(body, thread_id, opts = {})
      data, _status_code, _headers = create_message_with_http_info(body, thread_id, opts)
      data
    end

    # Create a message.
    # @param body 
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) to create a message for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageObject, Integer, Hash)>] MessageObject data, response status code and response headers
    def create_message_with_http_info(body, thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.create_message ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AssistantsApi.create_message"
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.create_message"
      end
      # resource path
      local_var_path = '/threads/{thread_id}/messages'.sub('{' + 'thread_id' + '}', thread_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'MessageObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#create_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a run.
    # @param body 
    # @param thread_id The ID of the thread to run.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. 
    # @return [RunObject]
    def create_run(body, thread_id, opts = {})
      data, _status_code, _headers = create_run_with_http_info(body, thread_id, opts)
      data
    end

    # Create a run.
    # @param body 
    # @param thread_id The ID of the thread to run.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. 
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def create_run_with_http_info(body, thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.create_run ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AssistantsApi.create_run"
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.create_run"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| ['step_details.tool_calls[*].file_search.results[*].content'].include?(item) }
        fail ArgumentError, 'invalid value for "include", must include one of step_details.tool_calls[*].file_search.results[*].content'
      end
      # resource path
      local_var_path = '/threads/{thread_id}/runs'.sub('{' + 'thread_id' + '}', thread_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'RunObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#create_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a thread.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateThreadRequest] :body 
    # @return [ThreadObject]
    def create_thread(opts = {})
      data, _status_code, _headers = create_thread_with_http_info(opts)
      data
    end

    # Create a thread.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateThreadRequest] :body 
    # @return [Array<(ThreadObject, Integer, Hash)>] ThreadObject data, response status code and response headers
    def create_thread_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.create_thread ...'
      end
      # resource path
      local_var_path = '/threads'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ThreadObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#create_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a thread and run it in one request.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [RunObject]
    def create_thread_and_run(body, opts = {})
      data, _status_code, _headers = create_thread_and_run_with_http_info(body, opts)
      data
    end

    # Create a thread and run it in one request.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def create_thread_and_run_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.create_thread_and_run ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AssistantsApi.create_thread_and_run"
      end
      # resource path
      local_var_path = '/threads/runs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'RunObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#create_thread_and_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an assistant.
    # @param assistant_id The ID of the assistant to delete.
    # @param [Hash] opts the optional parameters
    # @return [DeleteAssistantResponse]
    def delete_assistant(assistant_id, opts = {})
      data, _status_code, _headers = delete_assistant_with_http_info(assistant_id, opts)
      data
    end

    # Delete an assistant.
    # @param assistant_id The ID of the assistant to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteAssistantResponse, Integer, Hash)>] DeleteAssistantResponse data, response status code and response headers
    def delete_assistant_with_http_info(assistant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.delete_assistant ...'
      end
      # verify the required parameter 'assistant_id' is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        fail ArgumentError, "Missing the required parameter 'assistant_id' when calling AssistantsApi.delete_assistant"
      end
      # resource path
      local_var_path = '/assistants/{assistant_id}'.sub('{' + 'assistant_id' + '}', assistant_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DeleteAssistantResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#delete_assistant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a message.
    # @param thread_id The ID of the thread to which this message belongs.
    # @param message_id The ID of the message to delete.
    # @param [Hash] opts the optional parameters
    # @return [DeleteMessageResponse]
    def delete_message(thread_id, message_id, opts = {})
      data, _status_code, _headers = delete_message_with_http_info(thread_id, message_id, opts)
      data
    end

    # Deletes a message.
    # @param thread_id The ID of the thread to which this message belongs.
    # @param message_id The ID of the message to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteMessageResponse, Integer, Hash)>] DeleteMessageResponse data, response status code and response headers
    def delete_message_with_http_info(thread_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.delete_message ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.delete_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling AssistantsApi.delete_message"
      end
      # resource path
      local_var_path = '/threads/{thread_id}/messages/{message_id}'.sub('{' + 'thread_id' + '}', thread_id.to_s).sub('{' + 'message_id' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DeleteMessageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#delete_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a thread.
    # @param thread_id The ID of the thread to delete.
    # @param [Hash] opts the optional parameters
    # @return [DeleteThreadResponse]
    def delete_thread(thread_id, opts = {})
      data, _status_code, _headers = delete_thread_with_http_info(thread_id, opts)
      data
    end

    # Delete a thread.
    # @param thread_id The ID of the thread to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteThreadResponse, Integer, Hash)>] DeleteThreadResponse data, response status code and response headers
    def delete_thread_with_http_info(thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.delete_thread ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.delete_thread"
      end
      # resource path
      local_var_path = '/threads/{thread_id}'.sub('{' + 'thread_id' + '}', thread_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DeleteThreadResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#delete_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves an assistant.
    # @param assistant_id The ID of the assistant to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [AssistantObject]
    def get_assistant(assistant_id, opts = {})
      data, _status_code, _headers = get_assistant_with_http_info(assistant_id, opts)
      data
    end

    # Retrieves an assistant.
    # @param assistant_id The ID of the assistant to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssistantObject, Integer, Hash)>] AssistantObject data, response status code and response headers
    def get_assistant_with_http_info(assistant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.get_assistant ...'
      end
      # verify the required parameter 'assistant_id' is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        fail ArgumentError, "Missing the required parameter 'assistant_id' when calling AssistantsApi.get_assistant"
      end
      # resource path
      local_var_path = '/assistants/{assistant_id}'.sub('{' + 'assistant_id' + '}', assistant_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AssistantObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#get_assistant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a message.
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
    # @param message_id The ID of the message to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [MessageObject]
    def get_message(thread_id, message_id, opts = {})
      data, _status_code, _headers = get_message_with_http_info(thread_id, message_id, opts)
      data
    end

    # Retrieve a message.
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
    # @param message_id The ID of the message to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageObject, Integer, Hash)>] MessageObject data, response status code and response headers
    def get_message_with_http_info(thread_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.get_message ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.get_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling AssistantsApi.get_message"
      end
      # resource path
      local_var_path = '/threads/{thread_id}/messages/{message_id}'.sub('{' + 'thread_id' + '}', thread_id.to_s).sub('{' + 'message_id' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MessageObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#get_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a run.
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) that was run.
    # @param run_id The ID of the run to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [RunObject]
    def get_run(thread_id, run_id, opts = {})
      data, _status_code, _headers = get_run_with_http_info(thread_id, run_id, opts)
      data
    end

    # Retrieves a run.
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) that was run.
    # @param run_id The ID of the run to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def get_run_with_http_info(thread_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.get_run ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.get_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AssistantsApi.get_run"
      end
      # resource path
      local_var_path = '/threads/{thread_id}/runs/{run_id}'.sub('{' + 'thread_id' + '}', thread_id.to_s).sub('{' + 'run_id' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RunObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#get_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a run step.
    # @param thread_id The ID of the thread to which the run and run step belongs.
    # @param run_id The ID of the run to which the run step belongs.
    # @param step_id The ID of the run step to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. 
    # @return [RunStepObject]
    def get_run_step(thread_id, run_id, step_id, opts = {})
      data, _status_code, _headers = get_run_step_with_http_info(thread_id, run_id, step_id, opts)
      data
    end

    # Retrieves a run step.
    # @param thread_id The ID of the thread to which the run and run step belongs.
    # @param run_id The ID of the run to which the run step belongs.
    # @param step_id The ID of the run step to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. 
    # @return [Array<(RunStepObject, Integer, Hash)>] RunStepObject data, response status code and response headers
    def get_run_step_with_http_info(thread_id, run_id, step_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.get_run_step ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.get_run_step"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AssistantsApi.get_run_step"
      end
      # verify the required parameter 'step_id' is set
      if @api_client.config.client_side_validation && step_id.nil?
        fail ArgumentError, "Missing the required parameter 'step_id' when calling AssistantsApi.get_run_step"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| ['step_details.tool_calls[*].file_search.results[*].content'].include?(item) }
        fail ArgumentError, 'invalid value for "include", must include one of step_details.tool_calls[*].file_search.results[*].content'
      end
      # resource path
      local_var_path = '/threads/{thread_id}/runs/{run_id}/steps/{step_id}'.sub('{' + 'thread_id' + '}', thread_id.to_s).sub('{' + 'run_id' + '}', run_id.to_s).sub('{' + 'step_id' + '}', step_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include[]'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RunStepObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#get_run_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a thread.
    # @param thread_id The ID of the thread to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [ThreadObject]
    def get_thread(thread_id, opts = {})
      data, _status_code, _headers = get_thread_with_http_info(thread_id, opts)
      data
    end

    # Retrieves a thread.
    # @param thread_id The ID of the thread to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThreadObject, Integer, Hash)>] ThreadObject data, response status code and response headers
    def get_thread_with_http_info(thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.get_thread ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.get_thread"
      end
      # resource path
      local_var_path = '/threads/{thread_id}'.sub('{' + 'thread_id' + '}', thread_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ThreadObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#get_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of assistants.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (default to desc)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @return [ListAssistantsResponse]
    def list_assistants(opts = {})
      data, _status_code, _headers = list_assistants_with_http_info(opts)
      data
    end

    # Returns a list of assistants.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @return [Array<(ListAssistantsResponse, Integer, Hash)>] ListAssistantsResponse data, response status code and response headers
    def list_assistants_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.list_assistants ...'
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/assistants'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListAssistantsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#list_assistants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of messages for a given thread.
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) the messages belong to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (default to desc)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @option opts [String] :run_id Filter messages by the run ID that generated them. 
    # @return [ListMessagesResponse]
    def list_messages(thread_id, opts = {})
      data, _status_code, _headers = list_messages_with_http_info(thread_id, opts)
      data
    end

    # Returns a list of messages for a given thread.
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) the messages belong to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @option opts [String] :run_id Filter messages by the run ID that generated them. 
    # @return [Array<(ListMessagesResponse, Integer, Hash)>] ListMessagesResponse data, response status code and response headers
    def list_messages_with_http_info(thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.list_messages ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.list_messages"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/threads/{thread_id}/messages'.sub('{' + 'thread_id' + '}', thread_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'run_id'] = opts[:'run_id'] if !opts[:'run_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListMessagesResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#list_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of run steps belonging to a run.
    # @param thread_id The ID of the thread the run and run steps belong to.
    # @param run_id The ID of the run the run steps belong to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (default to desc)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @option opts [Array<String>] :include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. 
    # @return [ListRunStepsResponse]
    def list_run_steps(thread_id, run_id, opts = {})
      data, _status_code, _headers = list_run_steps_with_http_info(thread_id, run_id, opts)
      data
    end

    # Returns a list of run steps belonging to a run.
    # @param thread_id The ID of the thread the run and run steps belong to.
    # @param run_id The ID of the run the run steps belong to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @option opts [Array<String>] :include A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. 
    # @return [Array<(ListRunStepsResponse, Integer, Hash)>] ListRunStepsResponse data, response status code and response headers
    def list_run_steps_with_http_info(thread_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.list_run_steps ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.list_run_steps"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AssistantsApi.list_run_steps"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| ['step_details.tool_calls[*].file_search.results[*].content'].include?(item) }
        fail ArgumentError, 'invalid value for "include", must include one of step_details.tool_calls[*].file_search.results[*].content'
      end
      # resource path
      local_var_path = '/threads/{thread_id}/runs/{run_id}/steps'.sub('{' + 'thread_id' + '}', thread_id.to_s).sub('{' + 'run_id' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'include[]'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListRunStepsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#list_run_steps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of runs belonging to a thread.
    # @param thread_id The ID of the thread the run belongs to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (default to desc)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @return [ListRunsResponse]
    def list_runs(thread_id, opts = {})
      data, _status_code, _headers = list_runs_with_http_info(thread_id, opts)
      data
    end

    # Returns a list of runs belonging to a thread.
    # @param thread_id The ID of the thread the run belongs to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @return [Array<(ListRunsResponse, Integer, Hash)>] ListRunsResponse data, response status code and response headers
    def list_runs_with_http_info(thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.list_runs ...'
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.list_runs"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/threads/{thread_id}/runs'.sub('{' + 'thread_id' + '}', thread_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListRunsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#list_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modifies an assistant.
    # @param body 
    # @param assistant_id The ID of the assistant to modify.
    # @param [Hash] opts the optional parameters
    # @return [AssistantObject]
    def modify_assistant(body, assistant_id, opts = {})
      data, _status_code, _headers = modify_assistant_with_http_info(body, assistant_id, opts)
      data
    end

    # Modifies an assistant.
    # @param body 
    # @param assistant_id The ID of the assistant to modify.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssistantObject, Integer, Hash)>] AssistantObject data, response status code and response headers
    def modify_assistant_with_http_info(body, assistant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.modify_assistant ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AssistantsApi.modify_assistant"
      end
      # verify the required parameter 'assistant_id' is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        fail ArgumentError, "Missing the required parameter 'assistant_id' when calling AssistantsApi.modify_assistant"
      end
      # resource path
      local_var_path = '/assistants/{assistant_id}'.sub('{' + 'assistant_id' + '}', assistant_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AssistantObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#modify_assistant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modifies a message.
    # @param body 
    # @param thread_id The ID of the thread to which this message belongs.
    # @param message_id The ID of the message to modify.
    # @param [Hash] opts the optional parameters
    # @return [MessageObject]
    def modify_message(body, thread_id, message_id, opts = {})
      data, _status_code, _headers = modify_message_with_http_info(body, thread_id, message_id, opts)
      data
    end

    # Modifies a message.
    # @param body 
    # @param thread_id The ID of the thread to which this message belongs.
    # @param message_id The ID of the message to modify.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageObject, Integer, Hash)>] MessageObject data, response status code and response headers
    def modify_message_with_http_info(body, thread_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.modify_message ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AssistantsApi.modify_message"
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.modify_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling AssistantsApi.modify_message"
      end
      # resource path
      local_var_path = '/threads/{thread_id}/messages/{message_id}'.sub('{' + 'thread_id' + '}', thread_id.to_s).sub('{' + 'message_id' + '}', message_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'MessageObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#modify_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modifies a run.
    # @param body 
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) that was run.
    # @param run_id The ID of the run to modify.
    # @param [Hash] opts the optional parameters
    # @return [RunObject]
    def modify_run(body, thread_id, run_id, opts = {})
      data, _status_code, _headers = modify_run_with_http_info(body, thread_id, run_id, opts)
      data
    end

    # Modifies a run.
    # @param body 
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) that was run.
    # @param run_id The ID of the run to modify.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def modify_run_with_http_info(body, thread_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.modify_run ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AssistantsApi.modify_run"
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.modify_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AssistantsApi.modify_run"
      end
      # resource path
      local_var_path = '/threads/{thread_id}/runs/{run_id}'.sub('{' + 'thread_id' + '}', thread_id.to_s).sub('{' + 'run_id' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'RunObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#modify_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modifies a thread.
    # @param body 
    # @param thread_id The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
    # @param [Hash] opts the optional parameters
    # @return [ThreadObject]
    def modify_thread(body, thread_id, opts = {})
      data, _status_code, _headers = modify_thread_with_http_info(body, thread_id, opts)
      data
    end

    # Modifies a thread.
    # @param body 
    # @param thread_id The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThreadObject, Integer, Hash)>] ThreadObject data, response status code and response headers
    def modify_thread_with_http_info(body, thread_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.modify_thread ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AssistantsApi.modify_thread"
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.modify_thread"
      end
      # resource path
      local_var_path = '/threads/{thread_id}'.sub('{' + 'thread_id' + '}', thread_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ThreadObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#modify_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. 
    # @param body 
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
    # @param run_id The ID of the run that requires the tool output submission.
    # @param [Hash] opts the optional parameters
    # @return [RunObject]
    def submit_tool_ouputs_to_run(body, thread_id, run_id, opts = {})
      data, _status_code, _headers = submit_tool_ouputs_to_run_with_http_info(body, thread_id, run_id, opts)
      data
    end

    # When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request. 
    # @param body 
    # @param thread_id The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
    # @param run_id The ID of the run that requires the tool output submission.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RunObject, Integer, Hash)>] RunObject data, response status code and response headers
    def submit_tool_ouputs_to_run_with_http_info(body, thread_id, run_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantsApi.submit_tool_ouputs_to_run ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AssistantsApi.submit_tool_ouputs_to_run"
      end
      # verify the required parameter 'thread_id' is set
      if @api_client.config.client_side_validation && thread_id.nil?
        fail ArgumentError, "Missing the required parameter 'thread_id' when calling AssistantsApi.submit_tool_ouputs_to_run"
      end
      # verify the required parameter 'run_id' is set
      if @api_client.config.client_side_validation && run_id.nil?
        fail ArgumentError, "Missing the required parameter 'run_id' when calling AssistantsApi.submit_tool_ouputs_to_run"
      end
      # resource path
      local_var_path = '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs'.sub('{' + 'thread_id' + '}', thread_id.to_s).sub('{' + 'run_id' + '}', run_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'RunObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantsApi#submit_tool_ouputs_to_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module OpenAIClient
  class ImagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates an image given a prompt.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ImagesResponse]
    def create_image(body, opts = {})
      data, _status_code, _headers = create_image_with_http_info(body, opts)
      data
    end

    # Creates an image given a prompt.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagesResponse, Integer, Hash)>] ImagesResponse data, response status code and response headers
    def create_image_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.create_image ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ImagesApi.create_image"
      end
      # resource path
      local_var_path = '/images/generations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ImagesResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#create_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates an edited or extended image given an original image and a prompt.
    # @param image 
    # @param prompt 
    # @param mask 
    # @param model 
    # @param n 
    # @param size 
    # @param response_format 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [ImagesResponse]
    def create_image_edit(image, prompt, mask, model, n, size, response_format, user, opts = {})
      data, _status_code, _headers = create_image_edit_with_http_info(image, prompt, mask, model, n, size, response_format, user, opts)
      data
    end

    # Creates an edited or extended image given an original image and a prompt.
    # @param image 
    # @param prompt 
    # @param mask 
    # @param model 
    # @param n 
    # @param size 
    # @param response_format 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagesResponse, Integer, Hash)>] ImagesResponse data, response status code and response headers
    def create_image_edit_with_http_info(image, prompt, mask, model, n, size, response_format, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.create_image_edit ...'
      end
      # verify the required parameter 'image' is set
      if @api_client.config.client_side_validation && image.nil?
        fail ArgumentError, "Missing the required parameter 'image' when calling ImagesApi.create_image_edit"
      end
      # verify the required parameter 'prompt' is set
      if @api_client.config.client_side_validation && prompt.nil?
        fail ArgumentError, "Missing the required parameter 'prompt' when calling ImagesApi.create_image_edit"
      end
      # verify the required parameter 'mask' is set
      if @api_client.config.client_side_validation && mask.nil?
        fail ArgumentError, "Missing the required parameter 'mask' when calling ImagesApi.create_image_edit"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling ImagesApi.create_image_edit"
      end
      # verify the required parameter 'n' is set
      if @api_client.config.client_side_validation && n.nil?
        fail ArgumentError, "Missing the required parameter 'n' when calling ImagesApi.create_image_edit"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling ImagesApi.create_image_edit"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['256x256', '512x512', '1024x1024'].include?(size)
        fail ArgumentError, "invalid value for 'size', must be one of 256x256, 512x512, 1024x1024"
      end
      # verify the required parameter 'response_format' is set
      if @api_client.config.client_side_validation && response_format.nil?
        fail ArgumentError, "Missing the required parameter 'response_format' when calling ImagesApi.create_image_edit"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['url', 'b64_json'].include?(response_format)
        fail ArgumentError, "invalid value for 'response_format', must be one of url, b64_json"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling ImagesApi.create_image_edit"
      end
      # resource path
      local_var_path = '/images/edits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['image'] = image
      form_params['prompt'] = prompt
      form_params['mask'] = mask
      form_params['model'] = model
      form_params['n'] = n
      form_params['size'] = size
      form_params['response_format'] = response_format
      form_params['user'] = user

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ImagesResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#create_image_edit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a variation of a given image.
    # @param image 
    # @param model 
    # @param n 
    # @param response_format 
    # @param size 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [ImagesResponse]
    def create_image_variation(image, model, n, response_format, size, user, opts = {})
      data, _status_code, _headers = create_image_variation_with_http_info(image, model, n, response_format, size, user, opts)
      data
    end

    # Creates a variation of a given image.
    # @param image 
    # @param model 
    # @param n 
    # @param response_format 
    # @param size 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagesResponse, Integer, Hash)>] ImagesResponse data, response status code and response headers
    def create_image_variation_with_http_info(image, model, n, response_format, size, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.create_image_variation ...'
      end
      # verify the required parameter 'image' is set
      if @api_client.config.client_side_validation && image.nil?
        fail ArgumentError, "Missing the required parameter 'image' when calling ImagesApi.create_image_variation"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling ImagesApi.create_image_variation"
      end
      # verify the required parameter 'n' is set
      if @api_client.config.client_side_validation && n.nil?
        fail ArgumentError, "Missing the required parameter 'n' when calling ImagesApi.create_image_variation"
      end
      # verify the required parameter 'response_format' is set
      if @api_client.config.client_side_validation && response_format.nil?
        fail ArgumentError, "Missing the required parameter 'response_format' when calling ImagesApi.create_image_variation"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['url', 'b64_json'].include?(response_format)
        fail ArgumentError, "invalid value for 'response_format', must be one of url, b64_json"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling ImagesApi.create_image_variation"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['256x256', '512x512', '1024x1024'].include?(size)
        fail ArgumentError, "invalid value for 'size', must be one of 256x256, 512x512, 1024x1024"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling ImagesApi.create_image_variation"
      end
      # resource path
      local_var_path = '/images/variations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['image'] = image
      form_params['model'] = model
      form_params['n'] = n
      form_params['response_format'] = response_format
      form_params['size'] = size
      form_params['user'] = user

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ImagesResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#create_image_variation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module OpenAIClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an organization admin API key
    # Create a new admin-level API key for the organization.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AdminApiKey]
    def admin_api_keys_create(body, opts = {})
      data, _status_code, _headers = admin_api_keys_create_with_http_info(body, opts)
      data
    end

    # Create an organization admin API key
    # Create a new admin-level API key for the organization.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminApiKey, Integer, Hash)>] AdminApiKey data, response status code and response headers
    def admin_api_keys_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.admin_api_keys_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.admin_api_keys_create"
      end
      # resource path
      local_var_path = '/organization/admin_api_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AdminApiKey' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_api_keys_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an organization admin API key
    # Delete the specified admin API key.
    # @param key_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def admin_api_keys_delete(key_id, opts = {})
      data, _status_code, _headers = admin_api_keys_delete_with_http_info(key_id, opts)
      data
    end

    # Delete an organization admin API key
    # Delete the specified admin API key.
    # @param key_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def admin_api_keys_delete_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.admin_api_keys_delete ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling DefaultApi.admin_api_keys_delete"
      end
      # resource path
      local_var_path = '/organization/admin_api_keys/{key_id}'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2002' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_api_keys_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a single organization API key
    # Get details for a specific organization API key by its ID.
    # @param key_id 
    # @param [Hash] opts the optional parameters
    # @return [AdminApiKey]
    def admin_api_keys_get(key_id, opts = {})
      data, _status_code, _headers = admin_api_keys_get_with_http_info(key_id, opts)
      data
    end

    # Retrieve a single organization API key
    # Get details for a specific organization API key by its ID.
    # @param key_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminApiKey, Integer, Hash)>] AdminApiKey data, response status code and response headers
    def admin_api_keys_get_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.admin_api_keys_get ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling DefaultApi.admin_api_keys_get"
      end
      # resource path
      local_var_path = '/organization/admin_api_keys/{key_id}'.sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AdminApiKey' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_api_keys_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List organization API keys
    # Retrieve a paginated list of organization admin API keys.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after 
    # @option opts [String] :order  (default to asc)
    # @option opts [Integer] :limit  (default to 20)
    # @return [ApiKeyList]
    def admin_api_keys_list(opts = {})
      data, _status_code, _headers = admin_api_keys_list_with_http_info(opts)
      data
    end

    # List organization API keys
    # Retrieve a paginated list of organization admin API keys.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after 
    # @option opts [String] :order 
    # @option opts [Integer] :limit 
    # @return [Array<(ApiKeyList, Integer, Hash)>] ApiKeyList data, response status code and response headers
    def admin_api_keys_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.admin_api_keys_list ...'
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/organization/admin_api_keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ApiKeyList' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_api_keys_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

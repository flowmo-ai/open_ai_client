=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module OpenAIClient
  class UsageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get audio speeches usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (default to 1d)
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [UsageResponse]
    def usage_audio_speeches(start_time, opts = {})
      data, _status_code, _headers = usage_audio_speeches_with_http_info(start_time, opts)
      data
    end

    # Get audio speeches usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;.
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [Array<(UsageResponse, Integer, Hash)>] UsageResponse data, response status code and response headers
    def usage_audio_speeches_with_http_info(start_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.usage_audio_speeches ...'
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling UsageApi.usage_audio_speeches"
      end
      if @api_client.config.client_side_validation && opts[:'bucket_width'] && !['1m', '1h', '1d'].include?(opts[:'bucket_width'])
        fail ArgumentError, 'invalid value for "bucket_width", must be one of 1m, 1h, 1d'
      end
      if @api_client.config.client_side_validation && opts[:'group_by'] && !opts[:'group_by'].all? { |item| ['project_id', 'user_id', 'api_key_id', 'model'].include?(item) }
        fail ArgumentError, 'invalid value for "group_by", must include one of project_id, user_id, api_key_id, model'
      end
      # resource path
      local_var_path = '/organization/usage/audio_speeches'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = start_time
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'bucket_width'] = opts[:'bucket_width'] if !opts[:'bucket_width'].nil?
      query_params[:'project_ids'] = @api_client.build_collection_param(opts[:'project_ids'], :multi) if !opts[:'project_ids'].nil?
      query_params[:'user_ids'] = @api_client.build_collection_param(opts[:'user_ids'], :multi) if !opts[:'user_ids'].nil?
      query_params[:'api_key_ids'] = @api_client.build_collection_param(opts[:'api_key_ids'], :multi) if !opts[:'api_key_ids'].nil?
      query_params[:'models'] = @api_client.build_collection_param(opts[:'models'], :multi) if !opts[:'models'].nil?
      query_params[:'group_by'] = @api_client.build_collection_param(opts[:'group_by'], :multi) if !opts[:'group_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#usage_audio_speeches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get audio transcriptions usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (default to 1d)
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [UsageResponse]
    def usage_audio_transcriptions(start_time, opts = {})
      data, _status_code, _headers = usage_audio_transcriptions_with_http_info(start_time, opts)
      data
    end

    # Get audio transcriptions usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;.
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [Array<(UsageResponse, Integer, Hash)>] UsageResponse data, response status code and response headers
    def usage_audio_transcriptions_with_http_info(start_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.usage_audio_transcriptions ...'
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling UsageApi.usage_audio_transcriptions"
      end
      if @api_client.config.client_side_validation && opts[:'bucket_width'] && !['1m', '1h', '1d'].include?(opts[:'bucket_width'])
        fail ArgumentError, 'invalid value for "bucket_width", must be one of 1m, 1h, 1d'
      end
      if @api_client.config.client_side_validation && opts[:'group_by'] && !opts[:'group_by'].all? { |item| ['project_id', 'user_id', 'api_key_id', 'model'].include?(item) }
        fail ArgumentError, 'invalid value for "group_by", must include one of project_id, user_id, api_key_id, model'
      end
      # resource path
      local_var_path = '/organization/usage/audio_transcriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = start_time
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'bucket_width'] = opts[:'bucket_width'] if !opts[:'bucket_width'].nil?
      query_params[:'project_ids'] = @api_client.build_collection_param(opts[:'project_ids'], :multi) if !opts[:'project_ids'].nil?
      query_params[:'user_ids'] = @api_client.build_collection_param(opts[:'user_ids'], :multi) if !opts[:'user_ids'].nil?
      query_params[:'api_key_ids'] = @api_client.build_collection_param(opts[:'api_key_ids'], :multi) if !opts[:'api_key_ids'].nil?
      query_params[:'models'] = @api_client.build_collection_param(opts[:'models'], :multi) if !opts[:'models'].nil?
      query_params[:'group_by'] = @api_client.build_collection_param(opts[:'group_by'], :multi) if !opts[:'group_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#usage_audio_transcriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get code interpreter sessions usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (default to 1d)
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [UsageResponse]
    def usage_code_interpreter_sessions(start_time, opts = {})
      data, _status_code, _headers = usage_code_interpreter_sessions_with_http_info(start_time, opts)
      data
    end

    # Get code interpreter sessions usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;.
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [Array<(UsageResponse, Integer, Hash)>] UsageResponse data, response status code and response headers
    def usage_code_interpreter_sessions_with_http_info(start_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.usage_code_interpreter_sessions ...'
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling UsageApi.usage_code_interpreter_sessions"
      end
      if @api_client.config.client_side_validation && opts[:'bucket_width'] && !['1m', '1h', '1d'].include?(opts[:'bucket_width'])
        fail ArgumentError, 'invalid value for "bucket_width", must be one of 1m, 1h, 1d'
      end
      if @api_client.config.client_side_validation && opts[:'group_by'] && !opts[:'group_by'].all? { |item| ['project_id'].include?(item) }
        fail ArgumentError, 'invalid value for "group_by", must include one of project_id'
      end
      # resource path
      local_var_path = '/organization/usage/code_interpreter_sessions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = start_time
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'bucket_width'] = opts[:'bucket_width'] if !opts[:'bucket_width'].nil?
      query_params[:'project_ids'] = @api_client.build_collection_param(opts[:'project_ids'], :multi) if !opts[:'project_ids'].nil?
      query_params[:'group_by'] = @api_client.build_collection_param(opts[:'group_by'], :multi) if !opts[:'group_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#usage_code_interpreter_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get completions usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (default to 1d)
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [BOOLEAN] :batch If &#x60;true&#x60;, return batch jobs only. If &#x60;false&#x60;, return non-batch jobs only. By default, return both. 
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [UsageResponse]
    def usage_completions(start_time, opts = {})
      data, _status_code, _headers = usage_completions_with_http_info(start_time, opts)
      data
    end

    # Get completions usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;.
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [BOOLEAN] :batch If &#x60;true&#x60;, return batch jobs only. If &#x60;false&#x60;, return non-batch jobs only. By default, return both. 
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;batch&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [Array<(UsageResponse, Integer, Hash)>] UsageResponse data, response status code and response headers
    def usage_completions_with_http_info(start_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.usage_completions ...'
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling UsageApi.usage_completions"
      end
      if @api_client.config.client_side_validation && opts[:'bucket_width'] && !['1m', '1h', '1d'].include?(opts[:'bucket_width'])
        fail ArgumentError, 'invalid value for "bucket_width", must be one of 1m, 1h, 1d'
      end
      if @api_client.config.client_side_validation && opts[:'group_by'] && !opts[:'group_by'].all? { |item| ['project_id', 'user_id', 'api_key_id', 'model', 'batch'].include?(item) }
        fail ArgumentError, 'invalid value for "group_by", must include one of project_id, user_id, api_key_id, model, batch'
      end
      # resource path
      local_var_path = '/organization/usage/completions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = start_time
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'bucket_width'] = opts[:'bucket_width'] if !opts[:'bucket_width'].nil?
      query_params[:'project_ids'] = @api_client.build_collection_param(opts[:'project_ids'], :multi) if !opts[:'project_ids'].nil?
      query_params[:'user_ids'] = @api_client.build_collection_param(opts[:'user_ids'], :multi) if !opts[:'user_ids'].nil?
      query_params[:'api_key_ids'] = @api_client.build_collection_param(opts[:'api_key_ids'], :multi) if !opts[:'api_key_ids'].nil?
      query_params[:'models'] = @api_client.build_collection_param(opts[:'models'], :multi) if !opts[:'models'].nil?
      query_params[:'batch'] = opts[:'batch'] if !opts[:'batch'].nil?
      query_params[:'group_by'] = @api_client.build_collection_param(opts[:'group_by'], :multi) if !opts[:'group_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#usage_completions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get costs details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently only &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;. (default to 1d)
    # @option opts [Array<String>] :project_ids Return only costs for these projects.
    # @option opts [Array<String>] :group_by Group the costs by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any combination of them.
    # @option opts [Integer] :limit A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.  (default to 7)
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [UsageResponse]
    def usage_costs(start_time, opts = {})
      data, _status_code, _headers = usage_costs_with_http_info(start_time, opts)
      data
    end

    # Get costs details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently only &#x60;1d&#x60; is supported, default to &#x60;1d&#x60;.
    # @option opts [Array<String>] :project_ids Return only costs for these projects.
    # @option opts [Array<String>] :group_by Group the costs by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;line_item&#x60; and any combination of them.
    # @option opts [Integer] :limit A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7. 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [Array<(UsageResponse, Integer, Hash)>] UsageResponse data, response status code and response headers
    def usage_costs_with_http_info(start_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.usage_costs ...'
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling UsageApi.usage_costs"
      end
      if @api_client.config.client_side_validation && opts[:'bucket_width'] && !['1d'].include?(opts[:'bucket_width'])
        fail ArgumentError, 'invalid value for "bucket_width", must be one of 1d'
      end
      if @api_client.config.client_side_validation && opts[:'group_by'] && !opts[:'group_by'].all? { |item| ['project_id', 'line_item'].include?(item) }
        fail ArgumentError, 'invalid value for "group_by", must include one of project_id, line_item'
      end
      # resource path
      local_var_path = '/organization/costs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = start_time
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'bucket_width'] = opts[:'bucket_width'] if !opts[:'bucket_width'].nil?
      query_params[:'project_ids'] = @api_client.build_collection_param(opts[:'project_ids'], :multi) if !opts[:'project_ids'].nil?
      query_params[:'group_by'] = @api_client.build_collection_param(opts[:'group_by'], :multi) if !opts[:'group_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#usage_costs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get embeddings usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (default to 1d)
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [UsageResponse]
    def usage_embeddings(start_time, opts = {})
      data, _status_code, _headers = usage_embeddings_with_http_info(start_time, opts)
      data
    end

    # Get embeddings usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;.
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [Array<(UsageResponse, Integer, Hash)>] UsageResponse data, response status code and response headers
    def usage_embeddings_with_http_info(start_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.usage_embeddings ...'
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling UsageApi.usage_embeddings"
      end
      if @api_client.config.client_side_validation && opts[:'bucket_width'] && !['1m', '1h', '1d'].include?(opts[:'bucket_width'])
        fail ArgumentError, 'invalid value for "bucket_width", must be one of 1m, 1h, 1d'
      end
      if @api_client.config.client_side_validation && opts[:'group_by'] && !opts[:'group_by'].all? { |item| ['project_id', 'user_id', 'api_key_id', 'model'].include?(item) }
        fail ArgumentError, 'invalid value for "group_by", must include one of project_id, user_id, api_key_id, model'
      end
      # resource path
      local_var_path = '/organization/usage/embeddings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = start_time
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'bucket_width'] = opts[:'bucket_width'] if !opts[:'bucket_width'].nil?
      query_params[:'project_ids'] = @api_client.build_collection_param(opts[:'project_ids'], :multi) if !opts[:'project_ids'].nil?
      query_params[:'user_ids'] = @api_client.build_collection_param(opts[:'user_ids'], :multi) if !opts[:'user_ids'].nil?
      query_params[:'api_key_ids'] = @api_client.build_collection_param(opts[:'api_key_ids'], :multi) if !opts[:'api_key_ids'].nil?
      query_params[:'models'] = @api_client.build_collection_param(opts[:'models'], :multi) if !opts[:'models'].nil?
      query_params[:'group_by'] = @api_client.build_collection_param(opts[:'group_by'], :multi) if !opts[:'group_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#usage_embeddings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get images usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (default to 1d)
    # @option opts [Array<String>] :sources Return only usages for these sources. Possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60; or any combination of them.
    # @option opts [Array<String>] :sizes Return only usages for these image sizes. Possible values are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;, &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of them.
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;, &#x60;source&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [UsageResponse]
    def usage_images(start_time, opts = {})
      data, _status_code, _headers = usage_images_with_http_info(start_time, opts)
      data
    end

    # Get images usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;.
    # @option opts [Array<String>] :sources Return only usages for these sources. Possible values are &#x60;image.generation&#x60;, &#x60;image.edit&#x60;, &#x60;image.variation&#x60; or any combination of them.
    # @option opts [Array<String>] :sizes Return only usages for these image sizes. Possible values are &#x60;256x256&#x60;, &#x60;512x512&#x60;, &#x60;1024x1024&#x60;, &#x60;1792x1792&#x60;, &#x60;1024x1792&#x60; or any combination of them.
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60;, &#x60;size&#x60;, &#x60;source&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [Array<(UsageResponse, Integer, Hash)>] UsageResponse data, response status code and response headers
    def usage_images_with_http_info(start_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.usage_images ...'
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling UsageApi.usage_images"
      end
      if @api_client.config.client_side_validation && opts[:'bucket_width'] && !['1m', '1h', '1d'].include?(opts[:'bucket_width'])
        fail ArgumentError, 'invalid value for "bucket_width", must be one of 1m, 1h, 1d'
      end
      if @api_client.config.client_side_validation && opts[:'sources'] && !opts[:'sources'].all? { |item| ['image.generation', 'image.edit', 'image.variation'].include?(item) }
        fail ArgumentError, 'invalid value for "sources", must include one of image.generation, image.edit, image.variation'
      end
      if @api_client.config.client_side_validation && opts[:'sizes'] && !opts[:'sizes'].all? { |item| ['256x256', '512x512', '1024x1024', '1792x1792', '1024x1792'].include?(item) }
        fail ArgumentError, 'invalid value for "sizes", must include one of 256x256, 512x512, 1024x1024, 1792x1792, 1024x1792'
      end
      if @api_client.config.client_side_validation && opts[:'group_by'] && !opts[:'group_by'].all? { |item| ['project_id', 'user_id', 'api_key_id', 'model', 'size', 'source'].include?(item) }
        fail ArgumentError, 'invalid value for "group_by", must include one of project_id, user_id, api_key_id, model, size, source'
      end
      # resource path
      local_var_path = '/organization/usage/images'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = start_time
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'bucket_width'] = opts[:'bucket_width'] if !opts[:'bucket_width'].nil?
      query_params[:'sources'] = @api_client.build_collection_param(opts[:'sources'], :multi) if !opts[:'sources'].nil?
      query_params[:'sizes'] = @api_client.build_collection_param(opts[:'sizes'], :multi) if !opts[:'sizes'].nil?
      query_params[:'project_ids'] = @api_client.build_collection_param(opts[:'project_ids'], :multi) if !opts[:'project_ids'].nil?
      query_params[:'user_ids'] = @api_client.build_collection_param(opts[:'user_ids'], :multi) if !opts[:'user_ids'].nil?
      query_params[:'api_key_ids'] = @api_client.build_collection_param(opts[:'api_key_ids'], :multi) if !opts[:'api_key_ids'].nil?
      query_params[:'models'] = @api_client.build_collection_param(opts[:'models'], :multi) if !opts[:'models'].nil?
      query_params[:'group_by'] = @api_client.build_collection_param(opts[:'group_by'], :multi) if !opts[:'group_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#usage_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get moderations usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (default to 1d)
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [UsageResponse]
    def usage_moderations(start_time, opts = {})
      data, _status_code, _headers = usage_moderations_with_http_info(start_time, opts)
      data
    end

    # Get moderations usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;.
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :user_ids Return only usage for these users.
    # @option opts [Array<String>] :api_key_ids Return only usage for these API keys.
    # @option opts [Array<String>] :models Return only usage for these models.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;, &#x60;user_id&#x60;, &#x60;api_key_id&#x60;, &#x60;model&#x60; or any combination of them.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [Array<(UsageResponse, Integer, Hash)>] UsageResponse data, response status code and response headers
    def usage_moderations_with_http_info(start_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.usage_moderations ...'
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling UsageApi.usage_moderations"
      end
      if @api_client.config.client_side_validation && opts[:'bucket_width'] && !['1m', '1h', '1d'].include?(opts[:'bucket_width'])
        fail ArgumentError, 'invalid value for "bucket_width", must be one of 1m, 1h, 1d'
      end
      if @api_client.config.client_side_validation && opts[:'group_by'] && !opts[:'group_by'].all? { |item| ['project_id', 'user_id', 'api_key_id', 'model'].include?(item) }
        fail ArgumentError, 'invalid value for "group_by", must include one of project_id, user_id, api_key_id, model'
      end
      # resource path
      local_var_path = '/organization/usage/moderations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = start_time
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'bucket_width'] = opts[:'bucket_width'] if !opts[:'bucket_width'].nil?
      query_params[:'project_ids'] = @api_client.build_collection_param(opts[:'project_ids'], :multi) if !opts[:'project_ids'].nil?
      query_params[:'user_ids'] = @api_client.build_collection_param(opts[:'user_ids'], :multi) if !opts[:'user_ids'].nil?
      query_params[:'api_key_ids'] = @api_client.build_collection_param(opts[:'api_key_ids'], :multi) if !opts[:'api_key_ids'].nil?
      query_params[:'models'] = @api_client.build_collection_param(opts[:'models'], :multi) if !opts[:'models'].nil?
      query_params[:'group_by'] = @api_client.build_collection_param(opts[:'group_by'], :multi) if !opts[:'group_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#usage_moderations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get vector stores usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;. (default to 1d)
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [UsageResponse]
    def usage_vector_stores(start_time, opts = {})
      data, _status_code, _headers = usage_vector_stores_with_http_info(start_time, opts)
      data
    end

    # Get vector stores usage details for the organization.
    # @param start_time Start time (Unix seconds) of the query time range, inclusive.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :end_time End time (Unix seconds) of the query time range, exclusive.
    # @option opts [String] :bucket_width Width of each time bucket in response. Currently &#x60;1m&#x60;, &#x60;1h&#x60; and &#x60;1d&#x60; are supported, default to &#x60;1d&#x60;.
    # @option opts [Array<String>] :project_ids Return only usage for these projects.
    # @option opts [Array<String>] :group_by Group the usage data by the specified fields. Support fields include &#x60;project_id&#x60;.
    # @option opts [Integer] :limit Specifies the number of buckets to return. - &#x60;bucket_width&#x3D;1d&#x60;: default: 7, max: 31 - &#x60;bucket_width&#x3D;1h&#x60;: default: 24, max: 168 - &#x60;bucket_width&#x3D;1m&#x60;: default: 60, max: 1440 
    # @option opts [String] :page A cursor for use in pagination. Corresponding to the &#x60;next_page&#x60; field from the previous response.
    # @return [Array<(UsageResponse, Integer, Hash)>] UsageResponse data, response status code and response headers
    def usage_vector_stores_with_http_info(start_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.usage_vector_stores ...'
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling UsageApi.usage_vector_stores"
      end
      if @api_client.config.client_side_validation && opts[:'bucket_width'] && !['1m', '1h', '1d'].include?(opts[:'bucket_width'])
        fail ArgumentError, 'invalid value for "bucket_width", must be one of 1m, 1h, 1d'
      end
      if @api_client.config.client_side_validation && opts[:'group_by'] && !opts[:'group_by'].all? { |item| ['project_id'].include?(item) }
        fail ArgumentError, 'invalid value for "group_by", must include one of project_id'
      end
      # resource path
      local_var_path = '/organization/usage/vector_stores'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_time'] = start_time
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'bucket_width'] = opts[:'bucket_width'] if !opts[:'bucket_width'].nil?
      query_params[:'project_ids'] = @api_client.build_collection_param(opts[:'project_ids'], :multi) if !opts[:'project_ids'].nil?
      query_params[:'group_by'] = @api_client.build_collection_param(opts[:'group_by'], :multi) if !opts[:'group_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'UsageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#usage_vector_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

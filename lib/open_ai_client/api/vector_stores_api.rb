=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module OpenAIClient
  class VectorStoresApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
    # @param vector_store_id The ID of the vector store that the file batch belongs to.
    # @param batch_id The ID of the file batch to cancel.
    # @param [Hash] opts the optional parameters
    # @return [VectorStoreFileBatchObject]
    def cancel_vector_store_file_batch(vector_store_id, batch_id, opts = {})
      data, _status_code, _headers = cancel_vector_store_file_batch_with_http_info(vector_store_id, batch_id, opts)
      data
    end

    # Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
    # @param vector_store_id The ID of the vector store that the file batch belongs to.
    # @param batch_id The ID of the file batch to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VectorStoreFileBatchObject, Integer, Hash)>] VectorStoreFileBatchObject data, response status code and response headers
    def cancel_vector_store_file_batch_with_http_info(vector_store_id, batch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.cancel_vector_store_file_batch ...'
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.cancel_vector_store_file_batch"
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling VectorStoresApi.cancel_vector_store_file_batch"
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s).sub('{' + 'batch_id' + '}', batch_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'VectorStoreFileBatchObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#cancel_vector_store_file_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a vector store.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [VectorStoreObject]
    def create_vector_store(body, opts = {})
      data, _status_code, _headers = create_vector_store_with_http_info(body, opts)
      data
    end

    # Create a vector store.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VectorStoreObject, Integer, Hash)>] VectorStoreObject data, response status code and response headers
    def create_vector_store_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.create_vector_store ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VectorStoresApi.create_vector_store"
      end
      # resource path
      local_var_path = '/vector_stores'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'VectorStoreObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#create_vector_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
    # @param body 
    # @param vector_store_id The ID of the vector store for which to create a File. 
    # @param [Hash] opts the optional parameters
    # @return [VectorStoreFileObject]
    def create_vector_store_file(body, vector_store_id, opts = {})
      data, _status_code, _headers = create_vector_store_file_with_http_info(body, vector_store_id, opts)
      data
    end

    # Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
    # @param body 
    # @param vector_store_id The ID of the vector store for which to create a File. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VectorStoreFileObject, Integer, Hash)>] VectorStoreFileObject data, response status code and response headers
    def create_vector_store_file_with_http_info(body, vector_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.create_vector_store_file ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VectorStoresApi.create_vector_store_file"
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.create_vector_store_file"
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}/files'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'VectorStoreFileObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#create_vector_store_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a vector store file batch.
    # @param body 
    # @param vector_store_id The ID of the vector store for which to create a File Batch. 
    # @param [Hash] opts the optional parameters
    # @return [VectorStoreFileBatchObject]
    def create_vector_store_file_batch(body, vector_store_id, opts = {})
      data, _status_code, _headers = create_vector_store_file_batch_with_http_info(body, vector_store_id, opts)
      data
    end

    # Create a vector store file batch.
    # @param body 
    # @param vector_store_id The ID of the vector store for which to create a File Batch. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VectorStoreFileBatchObject, Integer, Hash)>] VectorStoreFileBatchObject data, response status code and response headers
    def create_vector_store_file_batch_with_http_info(body, vector_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.create_vector_store_file_batch ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VectorStoresApi.create_vector_store_file_batch"
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.create_vector_store_file_batch"
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}/file_batches'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'VectorStoreFileBatchObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#create_vector_store_file_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a vector store.
    # @param vector_store_id The ID of the vector store to delete.
    # @param [Hash] opts the optional parameters
    # @return [DeleteVectorStoreResponse]
    def delete_vector_store(vector_store_id, opts = {})
      data, _status_code, _headers = delete_vector_store_with_http_info(vector_store_id, opts)
      data
    end

    # Delete a vector store.
    # @param vector_store_id The ID of the vector store to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteVectorStoreResponse, Integer, Hash)>] DeleteVectorStoreResponse data, response status code and response headers
    def delete_vector_store_with_http_info(vector_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.delete_vector_store ...'
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.delete_vector_store"
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DeleteVectorStoreResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#delete_vector_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
    # @param vector_store_id The ID of the vector store that the file belongs to.
    # @param file_id The ID of the file to delete.
    # @param [Hash] opts the optional parameters
    # @return [DeleteVectorStoreFileResponse]
    def delete_vector_store_file(vector_store_id, file_id, opts = {})
      data, _status_code, _headers = delete_vector_store_file_with_http_info(vector_store_id, file_id, opts)
      data
    end

    # Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
    # @param vector_store_id The ID of the vector store that the file belongs to.
    # @param file_id The ID of the file to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteVectorStoreFileResponse, Integer, Hash)>] DeleteVectorStoreFileResponse data, response status code and response headers
    def delete_vector_store_file_with_http_info(vector_store_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.delete_vector_store_file ...'
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.delete_vector_store_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling VectorStoresApi.delete_vector_store_file"
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}/files/{file_id}'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s).sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DeleteVectorStoreFileResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#delete_vector_store_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a vector store.
    # @param vector_store_id The ID of the vector store to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [VectorStoreObject]
    def get_vector_store(vector_store_id, opts = {})
      data, _status_code, _headers = get_vector_store_with_http_info(vector_store_id, opts)
      data
    end

    # Retrieves a vector store.
    # @param vector_store_id The ID of the vector store to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VectorStoreObject, Integer, Hash)>] VectorStoreObject data, response status code and response headers
    def get_vector_store_with_http_info(vector_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.get_vector_store ...'
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.get_vector_store"
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'VectorStoreObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#get_vector_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a vector store file.
    # @param vector_store_id The ID of the vector store that the file belongs to.
    # @param file_id The ID of the file being retrieved.
    # @param [Hash] opts the optional parameters
    # @return [VectorStoreFileObject]
    def get_vector_store_file(vector_store_id, file_id, opts = {})
      data, _status_code, _headers = get_vector_store_file_with_http_info(vector_store_id, file_id, opts)
      data
    end

    # Retrieves a vector store file.
    # @param vector_store_id The ID of the vector store that the file belongs to.
    # @param file_id The ID of the file being retrieved.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VectorStoreFileObject, Integer, Hash)>] VectorStoreFileObject data, response status code and response headers
    def get_vector_store_file_with_http_info(vector_store_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.get_vector_store_file ...'
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.get_vector_store_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling VectorStoresApi.get_vector_store_file"
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}/files/{file_id}'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s).sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'VectorStoreFileObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#get_vector_store_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a vector store file batch.
    # @param vector_store_id The ID of the vector store that the file batch belongs to.
    # @param batch_id The ID of the file batch being retrieved.
    # @param [Hash] opts the optional parameters
    # @return [VectorStoreFileBatchObject]
    def get_vector_store_file_batch(vector_store_id, batch_id, opts = {})
      data, _status_code, _headers = get_vector_store_file_batch_with_http_info(vector_store_id, batch_id, opts)
      data
    end

    # Retrieves a vector store file batch.
    # @param vector_store_id The ID of the vector store that the file batch belongs to.
    # @param batch_id The ID of the file batch being retrieved.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VectorStoreFileBatchObject, Integer, Hash)>] VectorStoreFileBatchObject data, response status code and response headers
    def get_vector_store_file_batch_with_http_info(vector_store_id, batch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.get_vector_store_file_batch ...'
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.get_vector_store_file_batch"
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling VectorStoresApi.get_vector_store_file_batch"
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}/file_batches/{batch_id}'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s).sub('{' + 'batch_id' + '}', batch_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'VectorStoreFileBatchObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#get_vector_store_file_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of vector store files in a batch.
    # @param vector_store_id The ID of the vector store that the files belong to.
    # @param batch_id The ID of the file batch that the files belong to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (default to desc)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @option opts [String] :filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.
    # @return [ListVectorStoreFilesResponse]
    def list_files_in_vector_store_batch(vector_store_id, batch_id, opts = {})
      data, _status_code, _headers = list_files_in_vector_store_batch_with_http_info(vector_store_id, batch_id, opts)
      data
    end

    # Returns a list of vector store files in a batch.
    # @param vector_store_id The ID of the vector store that the files belong to.
    # @param batch_id The ID of the file batch that the files belong to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @option opts [String] :filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.
    # @return [Array<(ListVectorStoreFilesResponse, Integer, Hash)>] ListVectorStoreFilesResponse data, response status code and response headers
    def list_files_in_vector_store_batch_with_http_info(vector_store_id, batch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.list_files_in_vector_store_batch ...'
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.list_files_in_vector_store_batch"
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling VectorStoresApi.list_files_in_vector_store_batch"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      if @api_client.config.client_side_validation && opts[:'filter'] && !['in_progress', 'completed', 'failed', 'cancelled'].include?(opts[:'filter'])
        fail ArgumentError, 'invalid value for "filter", must be one of in_progress, completed, failed, cancelled'
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}/file_batches/{batch_id}/files'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s).sub('{' + 'batch_id' + '}', batch_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListVectorStoreFilesResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#list_files_in_vector_store_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of vector store files.
    # @param vector_store_id The ID of the vector store that the files belong to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (default to desc)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @option opts [String] :filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.
    # @return [ListVectorStoreFilesResponse]
    def list_vector_store_files(vector_store_id, opts = {})
      data, _status_code, _headers = list_vector_store_files_with_http_info(vector_store_id, opts)
      data
    end

    # Returns a list of vector store files.
    # @param vector_store_id The ID of the vector store that the files belong to.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @option opts [String] :filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.
    # @return [Array<(ListVectorStoreFilesResponse, Integer, Hash)>] ListVectorStoreFilesResponse data, response status code and response headers
    def list_vector_store_files_with_http_info(vector_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.list_vector_store_files ...'
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.list_vector_store_files"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      if @api_client.config.client_side_validation && opts[:'filter'] && !['in_progress', 'completed', 'failed', 'cancelled'].include?(opts[:'filter'])
        fail ArgumentError, 'invalid value for "filter", must be one of in_progress, completed, failed, cancelled'
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}/files'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListVectorStoreFilesResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#list_vector_store_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of vector stores.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (default to desc)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @return [ListVectorStoresResponse]
    def list_vector_stores(opts = {})
      data, _status_code, _headers = list_vector_stores_with_http_info(opts)
      data
    end

    # Returns a list of vector stores.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @return [Array<(ListVectorStoresResponse, Integer, Hash)>] ListVectorStoresResponse data, response status code and response headers
    def list_vector_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.list_vector_stores ...'
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/vector_stores'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListVectorStoresResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#list_vector_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modifies a vector store.
    # @param body 
    # @param vector_store_id The ID of the vector store to modify.
    # @param [Hash] opts the optional parameters
    # @return [VectorStoreObject]
    def modify_vector_store(body, vector_store_id, opts = {})
      data, _status_code, _headers = modify_vector_store_with_http_info(body, vector_store_id, opts)
      data
    end

    # Modifies a vector store.
    # @param body 
    # @param vector_store_id The ID of the vector store to modify.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VectorStoreObject, Integer, Hash)>] VectorStoreObject data, response status code and response headers
    def modify_vector_store_with_http_info(body, vector_store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VectorStoresApi.modify_vector_store ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VectorStoresApi.modify_vector_store"
      end
      # verify the required parameter 'vector_store_id' is set
      if @api_client.config.client_side_validation && vector_store_id.nil?
        fail ArgumentError, "Missing the required parameter 'vector_store_id' when calling VectorStoresApi.modify_vector_store"
      end
      # resource path
      local_var_path = '/vector_stores/{vector_store_id}'.sub('{' + 'vector_store_id' + '}', vector_store_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'VectorStoreObject' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VectorStoresApi#modify_vector_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module OpenAIClient
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Archives a project in the organization. Archived projects cannot be used or updated.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def archive_project(project_id, opts = {})
      data, _status_code, _headers = archive_project_with_http_info(project_id, opts)
      data
    end

    # Archives a project in the organization. Archived projects cannot be used or updated.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def archive_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.archive_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.archive_project"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/archive'.sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Project' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#archive_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
    # @param body The project create request payload.
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def create_project(body, opts = {})
      data, _status_code, _headers = create_project_with_http_info(body, opts)
      data
    end

    # Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
    # @param body The project create request payload.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def create_project_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.create_project ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectsApi.create_project"
      end
      # resource path
      local_var_path = '/organization/projects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Project' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new service account in the project. This also returns an unredacted API key for the service account.
    # @param body The project service account create request payload.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [ProjectServiceAccountCreateResponse]
    def create_project_service_account(body, project_id, opts = {})
      data, _status_code, _headers = create_project_service_account_with_http_info(body, project_id, opts)
      data
    end

    # Creates a new service account in the project. This also returns an unredacted API key for the service account.
    # @param body The project service account create request payload.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectServiceAccountCreateResponse, Integer, Hash)>] ProjectServiceAccountCreateResponse data, response status code and response headers
    def create_project_service_account_with_http_info(body, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.create_project_service_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectsApi.create_project_service_account"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.create_project_service_account"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/service_accounts'.sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ProjectServiceAccountCreateResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#create_project_service_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a user to the project. Users must already be members of the organization to be added to a project.
    # @param body The project user create request payload.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [ProjectUser]
    def create_project_user(body, project_id, opts = {})
      data, _status_code, _headers = create_project_user_with_http_info(body, project_id, opts)
      data
    end

    # Adds a user to the project. Users must already be members of the organization to be added to a project.
    # @param body The project user create request payload.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectUser, Integer, Hash)>] ProjectUser data, response status code and response headers
    def create_project_user_with_http_info(body, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.create_project_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectsApi.create_project_user"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.create_project_user"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/users'.sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ProjectUser' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#create_project_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an API key from the project.
    # @param project_id The ID of the project.
    # @param key_id The ID of the API key.
    # @param [Hash] opts the optional parameters
    # @return [ProjectApiKeyDeleteResponse]
    def delete_project_api_key(project_id, key_id, opts = {})
      data, _status_code, _headers = delete_project_api_key_with_http_info(project_id, key_id, opts)
      data
    end

    # Deletes an API key from the project.
    # @param project_id The ID of the project.
    # @param key_id The ID of the API key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectApiKeyDeleteResponse, Integer, Hash)>] ProjectApiKeyDeleteResponse data, response status code and response headers
    def delete_project_api_key_with_http_info(project_id, key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.delete_project_api_key ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.delete_project_api_key"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling ProjectsApi.delete_project_api_key"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/api_keys/{key_id}'.sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectApiKeyDeleteResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#delete_project_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a service account from the project.
    # @param project_id The ID of the project.
    # @param service_account_id The ID of the service account.
    # @param [Hash] opts the optional parameters
    # @return [ProjectServiceAccountDeleteResponse]
    def delete_project_service_account(project_id, service_account_id, opts = {})
      data, _status_code, _headers = delete_project_service_account_with_http_info(project_id, service_account_id, opts)
      data
    end

    # Deletes a service account from the project.
    # @param project_id The ID of the project.
    # @param service_account_id The ID of the service account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectServiceAccountDeleteResponse, Integer, Hash)>] ProjectServiceAccountDeleteResponse data, response status code and response headers
    def delete_project_service_account_with_http_info(project_id, service_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.delete_project_service_account ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.delete_project_service_account"
      end
      # verify the required parameter 'service_account_id' is set
      if @api_client.config.client_side_validation && service_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_account_id' when calling ProjectsApi.delete_project_service_account"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/service_accounts/{service_account_id}'.sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'service_account_id' + '}', service_account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectServiceAccountDeleteResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#delete_project_service_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a user from the project.
    # @param project_id The ID of the project.
    # @param user_id The ID of the user.
    # @param [Hash] opts the optional parameters
    # @return [ProjectUserDeleteResponse]
    def delete_project_user(project_id, user_id, opts = {})
      data, _status_code, _headers = delete_project_user_with_http_info(project_id, user_id, opts)
      data
    end

    # Deletes a user from the project.
    # @param project_id The ID of the project.
    # @param user_id The ID of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectUserDeleteResponse, Integer, Hash)>] ProjectUserDeleteResponse data, response status code and response headers
    def delete_project_user_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.delete_project_user ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.delete_project_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectsApi.delete_project_user"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/users/{user_id}'.sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'user_id' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectUserDeleteResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#delete_project_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of API keys in the project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @return [ProjectApiKeyListResponse]
    def list_project_api_keys(project_id, opts = {})
      data, _status_code, _headers = list_project_api_keys_with_http_info(project_id, opts)
      data
    end

    # Returns a list of API keys in the project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @return [Array<(ProjectApiKeyListResponse, Integer, Hash)>] ProjectApiKeyListResponse data, response status code and response headers
    def list_project_api_keys_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.list_project_api_keys ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.list_project_api_keys"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/api_keys'.sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectApiKeyListResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#list_project_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the rate limits per model for a project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. The default is 100.  (default to 100)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @return [ProjectRateLimitListResponse]
    def list_project_rate_limits(project_id, opts = {})
      data, _status_code, _headers = list_project_rate_limits_with_http_info(project_id, opts)
      data
    end

    # Returns the rate limits per model for a project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. The default is 100. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
    # @return [Array<(ProjectRateLimitListResponse, Integer, Hash)>] ProjectRateLimitListResponse data, response status code and response headers
    def list_project_rate_limits_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.list_project_rate_limits ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.list_project_rate_limits"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/rate_limits'.sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectRateLimitListResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#list_project_rate_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of service accounts in the project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @return [ProjectServiceAccountListResponse]
    def list_project_service_accounts(project_id, opts = {})
      data, _status_code, _headers = list_project_service_accounts_with_http_info(project_id, opts)
      data
    end

    # Returns a list of service accounts in the project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @return [Array<(ProjectServiceAccountListResponse, Integer, Hash)>] ProjectServiceAccountListResponse data, response status code and response headers
    def list_project_service_accounts_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.list_project_service_accounts ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.list_project_service_accounts"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/service_accounts'.sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectServiceAccountListResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#list_project_service_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of users in the project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @return [ProjectUserListResponse]
    def list_project_users(project_id, opts = {})
      data, _status_code, _headers = list_project_users_with_http_info(project_id, opts)
      data
    end

    # Returns a list of users in the project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @return [Array<(ProjectUserListResponse, Integer, Hash)>] ProjectUserListResponse data, response status code and response headers
    def list_project_users_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.list_project_users ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.list_project_users"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/users'.sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectUserListResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#list_project_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of projects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (default to 20)
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [BOOLEAN] :include_archived If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default. (default to false)
    # @return [ProjectListResponse]
    def list_projects(opts = {})
      data, _status_code, _headers = list_projects_with_http_info(opts)
      data
    end

    # Returns a list of projects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
    # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
    # @option opts [BOOLEAN] :include_archived If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default.
    # @return [Array<(ProjectListResponse, Integer, Hash)>] ProjectListResponse data, response status code and response headers
    def list_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.list_projects ...'
      end
      # resource path
      local_var_path = '/organization/projects'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'include_archived'] = opts[:'include_archived'] if !opts[:'include_archived'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectListResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#list_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modifies a project in the organization.
    # @param body The project update request payload.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def modify_project(body, project_id, opts = {})
      data, _status_code, _headers = modify_project_with_http_info(body, project_id, opts)
      data
    end

    # Modifies a project in the organization.
    # @param body The project update request payload.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def modify_project_with_http_info(body, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.modify_project ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectsApi.modify_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.modify_project"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}'.sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Project' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#modify_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modifies a user's role in the project.
    # @param body The project user update request payload.
    # @param project_id The ID of the project.
    # @param user_id The ID of the user.
    # @param [Hash] opts the optional parameters
    # @return [ProjectUser]
    def modify_project_user(body, project_id, user_id, opts = {})
      data, _status_code, _headers = modify_project_user_with_http_info(body, project_id, user_id, opts)
      data
    end

    # Modifies a user&#x27;s role in the project.
    # @param body The project user update request payload.
    # @param project_id The ID of the project.
    # @param user_id The ID of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectUser, Integer, Hash)>] ProjectUser data, response status code and response headers
    def modify_project_user_with_http_info(body, project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.modify_project_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectsApi.modify_project_user"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.modify_project_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectsApi.modify_project_user"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/users/{user_id}'.sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'user_id' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ProjectUser' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#modify_project_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def retrieve_project(project_id, opts = {})
      data, _status_code, _headers = retrieve_project_with_http_info(project_id, opts)
      data
    end

    # Retrieves a project.
    # @param project_id The ID of the project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def retrieve_project_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.retrieve_project ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.retrieve_project"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}'.sub('{' + 'project_id' + '}', project_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Project' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#retrieve_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves an API key in the project.
    # @param project_id The ID of the project.
    # @param key_id The ID of the API key.
    # @param [Hash] opts the optional parameters
    # @return [ProjectApiKey]
    def retrieve_project_api_key(project_id, key_id, opts = {})
      data, _status_code, _headers = retrieve_project_api_key_with_http_info(project_id, key_id, opts)
      data
    end

    # Retrieves an API key in the project.
    # @param project_id The ID of the project.
    # @param key_id The ID of the API key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectApiKey, Integer, Hash)>] ProjectApiKey data, response status code and response headers
    def retrieve_project_api_key_with_http_info(project_id, key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.retrieve_project_api_key ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.retrieve_project_api_key"
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling ProjectsApi.retrieve_project_api_key"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/api_keys/{key_id}'.sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'key_id' + '}', key_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectApiKey' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#retrieve_project_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a service account in the project.
    # @param project_id The ID of the project.
    # @param service_account_id The ID of the service account.
    # @param [Hash] opts the optional parameters
    # @return [ProjectServiceAccount]
    def retrieve_project_service_account(project_id, service_account_id, opts = {})
      data, _status_code, _headers = retrieve_project_service_account_with_http_info(project_id, service_account_id, opts)
      data
    end

    # Retrieves a service account in the project.
    # @param project_id The ID of the project.
    # @param service_account_id The ID of the service account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectServiceAccount, Integer, Hash)>] ProjectServiceAccount data, response status code and response headers
    def retrieve_project_service_account_with_http_info(project_id, service_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.retrieve_project_service_account ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.retrieve_project_service_account"
      end
      # verify the required parameter 'service_account_id' is set
      if @api_client.config.client_side_validation && service_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_account_id' when calling ProjectsApi.retrieve_project_service_account"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/service_accounts/{service_account_id}'.sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'service_account_id' + '}', service_account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectServiceAccount' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#retrieve_project_service_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a user in the project.
    # @param project_id The ID of the project.
    # @param user_id The ID of the user.
    # @param [Hash] opts the optional parameters
    # @return [ProjectUser]
    def retrieve_project_user(project_id, user_id, opts = {})
      data, _status_code, _headers = retrieve_project_user_with_http_info(project_id, user_id, opts)
      data
    end

    # Retrieves a user in the project.
    # @param project_id The ID of the project.
    # @param user_id The ID of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectUser, Integer, Hash)>] ProjectUser data, response status code and response headers
    def retrieve_project_user_with_http_info(project_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.retrieve_project_user ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.retrieve_project_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ProjectsApi.retrieve_project_user"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/users/{user_id}'.sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'user_id' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ProjectUser' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#retrieve_project_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates a project rate limit.
    # @param body The project rate limit update request payload.
    # @param project_id The ID of the project.
    # @param rate_limit_id The ID of the rate limit.
    # @param [Hash] opts the optional parameters
    # @return [ProjectRateLimit]
    def update_project_rate_limits(body, project_id, rate_limit_id, opts = {})
      data, _status_code, _headers = update_project_rate_limits_with_http_info(body, project_id, rate_limit_id, opts)
      data
    end

    # Updates a project rate limit.
    # @param body The project rate limit update request payload.
    # @param project_id The ID of the project.
    # @param rate_limit_id The ID of the rate limit.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectRateLimit, Integer, Hash)>] ProjectRateLimit data, response status code and response headers
    def update_project_rate_limits_with_http_info(body, project_id, rate_limit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.update_project_rate_limits ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectsApi.update_project_rate_limits"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.update_project_rate_limits"
      end
      # verify the required parameter 'rate_limit_id' is set
      if @api_client.config.client_side_validation && rate_limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'rate_limit_id' when calling ProjectsApi.update_project_rate_limits"
      end
      # resource path
      local_var_path = '/organization/projects/{project_id}/rate_limits/{rate_limit_id}'.sub('{' + 'project_id' + '}', project_id.to_s).sub('{' + 'rate_limit_id' + '}', rate_limit_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ProjectRateLimit' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#update_project_rate_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

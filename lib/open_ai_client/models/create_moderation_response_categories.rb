=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

require 'date'

module OpenAIClient
  # A list of the categories, and whether they are flagged or not.
  class CreateModerationResponseCategories
    # Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
    attr_accessor :hate

    # Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
    attr_accessor :hatethreatening

    # Content that expresses, incites, or promotes harassing language towards any target.
    attr_accessor :harassment

    # Harassment content that also includes violence or serious harm towards any target.
    attr_accessor :harassmentthreatening

    # Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, \"how to shoplift\" would fit this category.
    attr_accessor :illicit

    # Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.
    attr_accessor :illicitviolent

    # Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
    attr_accessor :self_harm

    # Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
    attr_accessor :self_harmintent

    # Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
    attr_accessor :self_harminstructions

    # Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
    attr_accessor :sexual

    # Sexual content that includes an individual who is under 18 years old.
    attr_accessor :sexualminors

    # Content that depicts death, violence, or physical injury.
    attr_accessor :violence

    # Content that depicts death, violence, or physical injury in graphic detail.
    attr_accessor :violencegraphic

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'hate' => :'hate',
        :'hatethreatening' => :'hate/threatening',
        :'harassment' => :'harassment',
        :'harassmentthreatening' => :'harassment/threatening',
        :'illicit' => :'illicit',
        :'illicitviolent' => :'illicit/violent',
        :'self_harm' => :'self-harm',
        :'self_harmintent' => :'self-harm/intent',
        :'self_harminstructions' => :'self-harm/instructions',
        :'sexual' => :'sexual',
        :'sexualminors' => :'sexual/minors',
        :'violence' => :'violence',
        :'violencegraphic' => :'violence/graphic'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'hate' => :'Object',
        :'hatethreatening' => :'Object',
        :'harassment' => :'Object',
        :'harassmentthreatening' => :'Object',
        :'illicit' => :'Object',
        :'illicitviolent' => :'Object',
        :'self_harm' => :'Object',
        :'self_harmintent' => :'Object',
        :'self_harminstructions' => :'Object',
        :'sexual' => :'Object',
        :'sexualminors' => :'Object',
        :'violence' => :'Object',
        :'violencegraphic' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenAIClient::CreateModerationResponseCategories` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenAIClient::CreateModerationResponseCategories`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'hate')
        self.hate = attributes[:'hate']
      end

      if attributes.key?(:'hatethreatening')
        self.hatethreatening = attributes[:'hatethreatening']
      end

      if attributes.key?(:'harassment')
        self.harassment = attributes[:'harassment']
      end

      if attributes.key?(:'harassmentthreatening')
        self.harassmentthreatening = attributes[:'harassmentthreatening']
      end

      if attributes.key?(:'illicit')
        self.illicit = attributes[:'illicit']
      end

      if attributes.key?(:'illicitviolent')
        self.illicitviolent = attributes[:'illicitviolent']
      end

      if attributes.key?(:'self_harm')
        self.self_harm = attributes[:'self_harm']
      end

      if attributes.key?(:'self_harmintent')
        self.self_harmintent = attributes[:'self_harmintent']
      end

      if attributes.key?(:'self_harminstructions')
        self.self_harminstructions = attributes[:'self_harminstructions']
      end

      if attributes.key?(:'sexual')
        self.sexual = attributes[:'sexual']
      end

      if attributes.key?(:'sexualminors')
        self.sexualminors = attributes[:'sexualminors']
      end

      if attributes.key?(:'violence')
        self.violence = attributes[:'violence']
      end

      if attributes.key?(:'violencegraphic')
        self.violencegraphic = attributes[:'violencegraphic']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @hate.nil?
        invalid_properties.push('invalid value for "hate", hate cannot be nil.')
      end

      if @hatethreatening.nil?
        invalid_properties.push('invalid value for "hatethreatening", hatethreatening cannot be nil.')
      end

      if @harassment.nil?
        invalid_properties.push('invalid value for "harassment", harassment cannot be nil.')
      end

      if @harassmentthreatening.nil?
        invalid_properties.push('invalid value for "harassmentthreatening", harassmentthreatening cannot be nil.')
      end

      if @illicit.nil?
        invalid_properties.push('invalid value for "illicit", illicit cannot be nil.')
      end

      if @illicitviolent.nil?
        invalid_properties.push('invalid value for "illicitviolent", illicitviolent cannot be nil.')
      end

      if @self_harm.nil?
        invalid_properties.push('invalid value for "self_harm", self_harm cannot be nil.')
      end

      if @self_harmintent.nil?
        invalid_properties.push('invalid value for "self_harmintent", self_harmintent cannot be nil.')
      end

      if @self_harminstructions.nil?
        invalid_properties.push('invalid value for "self_harminstructions", self_harminstructions cannot be nil.')
      end

      if @sexual.nil?
        invalid_properties.push('invalid value for "sexual", sexual cannot be nil.')
      end

      if @sexualminors.nil?
        invalid_properties.push('invalid value for "sexualminors", sexualminors cannot be nil.')
      end

      if @violence.nil?
        invalid_properties.push('invalid value for "violence", violence cannot be nil.')
      end

      if @violencegraphic.nil?
        invalid_properties.push('invalid value for "violencegraphic", violencegraphic cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @hate.nil?
      return false if @hatethreatening.nil?
      return false if @harassment.nil?
      return false if @harassmentthreatening.nil?
      return false if @illicit.nil?
      return false if @illicitviolent.nil?
      return false if @self_harm.nil?
      return false if @self_harmintent.nil?
      return false if @self_harminstructions.nil?
      return false if @sexual.nil?
      return false if @sexualminors.nil?
      return false if @violence.nil?
      return false if @violencegraphic.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          hate == o.hate &&
          hatethreatening == o.hatethreatening &&
          harassment == o.harassment &&
          harassmentthreatening == o.harassmentthreatening &&
          illicit == o.illicit &&
          illicitviolent == o.illicitviolent &&
          self_harm == o.self_harm &&
          self_harmintent == o.self_harmintent &&
          self_harminstructions == o.self_harminstructions &&
          sexual == o.sexual &&
          sexualminors == o.sexualminors &&
          violence == o.violence &&
          violencegraphic == o.violencegraphic
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [hate, hatethreatening, harassment, harassmentthreatening, illicit, illicitviolent, self_harm, self_harmintent, self_harminstructions, sexual, sexualminors, violence, violencegraphic].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenAIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

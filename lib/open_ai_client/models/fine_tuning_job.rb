=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

require 'date'

module OpenAIClient
  # The `fine_tuning.job` object represents a fine-tuning job that has been created through the API. 
  class FineTuningJob
    # The object identifier, which can be referenced in the API endpoints.
    attr_accessor :id

    # The Unix timestamp (in seconds) for when the fine-tuning job was created.
    attr_accessor :created_at

    attr_accessor :error

    # The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
    attr_accessor :fine_tuned_model

    # The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
    attr_accessor :finished_at

    attr_accessor :hyperparameters

    # The base model that is being fine-tuned.
    attr_accessor :model

    # The object type, which is always \"fine_tuning.job\".
    attr_accessor :object

    # The organization that owns the fine-tuning job.
    attr_accessor :organization_id

    # The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
    attr_accessor :result_files

    # The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
    attr_accessor :status

    # The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
    attr_accessor :trained_tokens

    # The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
    attr_accessor :training_file

    # The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
    attr_accessor :validation_file

    # A list of integrations to enable for this fine-tuning job.
    attr_accessor :integrations

    # The seed used for the fine-tuning job.
    attr_accessor :seed

    # The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
    attr_accessor :estimated_finish

    attr_accessor :method

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'error' => :'error',
        :'fine_tuned_model' => :'fine_tuned_model',
        :'finished_at' => :'finished_at',
        :'hyperparameters' => :'hyperparameters',
        :'model' => :'model',
        :'object' => :'object',
        :'organization_id' => :'organization_id',
        :'result_files' => :'result_files',
        :'status' => :'status',
        :'trained_tokens' => :'trained_tokens',
        :'training_file' => :'training_file',
        :'validation_file' => :'validation_file',
        :'integrations' => :'integrations',
        :'seed' => :'seed',
        :'estimated_finish' => :'estimated_finish',
        :'method' => :'method'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'created_at' => :'Object',
        :'error' => :'Object',
        :'fine_tuned_model' => :'Object',
        :'finished_at' => :'Object',
        :'hyperparameters' => :'Object',
        :'model' => :'Object',
        :'object' => :'Object',
        :'organization_id' => :'Object',
        :'result_files' => :'Object',
        :'status' => :'Object',
        :'trained_tokens' => :'Object',
        :'training_file' => :'Object',
        :'validation_file' => :'Object',
        :'integrations' => :'Object',
        :'seed' => :'Object',
        :'estimated_finish' => :'Object',
        :'method' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'fine_tuned_model',
        :'finished_at',
        :'trained_tokens',
        :'validation_file',
        :'integrations',
        :'estimated_finish',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenAIClient::FineTuningJob` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenAIClient::FineTuningJob`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'fine_tuned_model')
        self.fine_tuned_model = attributes[:'fine_tuned_model']
      end

      if attributes.key?(:'finished_at')
        self.finished_at = attributes[:'finished_at']
      end

      if attributes.key?(:'hyperparameters')
        self.hyperparameters = attributes[:'hyperparameters']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      end

      if attributes.key?(:'organization_id')
        self.organization_id = attributes[:'organization_id']
      end

      if attributes.key?(:'result_files')
        if (value = attributes[:'result_files']).is_a?(Array)
          self.result_files = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'trained_tokens')
        self.trained_tokens = attributes[:'trained_tokens']
      end

      if attributes.key?(:'training_file')
        self.training_file = attributes[:'training_file']
      end

      if attributes.key?(:'validation_file')
        self.validation_file = attributes[:'validation_file']
      end

      if attributes.key?(:'integrations')
        if (value = attributes[:'integrations']).is_a?(Array)
          self.integrations = value
        end
      end

      if attributes.key?(:'seed')
        self.seed = attributes[:'seed']
      end

      if attributes.key?(:'estimated_finish')
        self.estimated_finish = attributes[:'estimated_finish']
      end

      if attributes.key?(:'method')
        self.method = attributes[:'method']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @error.nil?
        invalid_properties.push('invalid value for "error", error cannot be nil.')
      end

      if @fine_tuned_model.nil?
        invalid_properties.push('invalid value for "fine_tuned_model", fine_tuned_model cannot be nil.')
      end

      if @finished_at.nil?
        invalid_properties.push('invalid value for "finished_at", finished_at cannot be nil.')
      end

      if @hyperparameters.nil?
        invalid_properties.push('invalid value for "hyperparameters", hyperparameters cannot be nil.')
      end

      if @model.nil?
        invalid_properties.push('invalid value for "model", model cannot be nil.')
      end

      if @object.nil?
        invalid_properties.push('invalid value for "object", object cannot be nil.')
      end

      if @organization_id.nil?
        invalid_properties.push('invalid value for "organization_id", organization_id cannot be nil.')
      end

      if @result_files.nil?
        invalid_properties.push('invalid value for "result_files", result_files cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @trained_tokens.nil?
        invalid_properties.push('invalid value for "trained_tokens", trained_tokens cannot be nil.')
      end

      if @training_file.nil?
        invalid_properties.push('invalid value for "training_file", training_file cannot be nil.')
      end

      if @validation_file.nil?
        invalid_properties.push('invalid value for "validation_file", validation_file cannot be nil.')
      end

      if @seed.nil?
        invalid_properties.push('invalid value for "seed", seed cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @created_at.nil?
      return false if @error.nil?
      return false if @fine_tuned_model.nil?
      return false if @finished_at.nil?
      return false if @hyperparameters.nil?
      return false if @model.nil?
      return false if @object.nil?
      object_validator = EnumAttributeValidator.new('Object', ['fine_tuning.job'])
      return false unless object_validator.valid?(@object)
      return false if @organization_id.nil?
      return false if @result_files.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('Object', ['validating_files', 'queued', 'running', 'succeeded', 'failed', 'cancelled'])
      return false unless status_validator.valid?(@status)
      return false if @trained_tokens.nil?
      return false if @training_file.nil?
      return false if @validation_file.nil?
      return false if @seed.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('Object', ['fine_tuning.job'])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('Object', ['validating_files', 'queued', 'running', 'succeeded', 'failed', 'cancelled'])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          error == o.error &&
          fine_tuned_model == o.fine_tuned_model &&
          finished_at == o.finished_at &&
          hyperparameters == o.hyperparameters &&
          model == o.model &&
          object == o.object &&
          organization_id == o.organization_id &&
          result_files == o.result_files &&
          status == o.status &&
          trained_tokens == o.trained_tokens &&
          training_file == o.training_file &&
          validation_file == o.validation_file &&
          integrations == o.integrations &&
          seed == o.seed &&
          estimated_finish == o.estimated_finish &&
          method == o.method
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, error, fine_tuned_model, finished_at, hyperparameters, model, object, organization_id, result_files, status, trained_tokens, training_file, validation_file, integrations, seed, estimated_finish, method].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenAIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

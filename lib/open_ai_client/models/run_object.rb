=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

require 'date'

module OpenAIClient
  # Represents an execution run on a [thread](/docs/api-reference/threads).
  class RunObject
    # The identifier, which can be referenced in API endpoints.
    attr_accessor :id

    # The object type, which is always `thread.run`.
    attr_accessor :object

    # The Unix timestamp (in seconds) for when the run was created.
    attr_accessor :created_at

    # The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
    attr_accessor :thread_id

    # The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
    attr_accessor :assistant_id

    # The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
    attr_accessor :status

    attr_accessor :required_action

    attr_accessor :last_error

    # The Unix timestamp (in seconds) for when the run will expire.
    attr_accessor :expires_at

    # The Unix timestamp (in seconds) for when the run was started.
    attr_accessor :started_at

    # The Unix timestamp (in seconds) for when the run was cancelled.
    attr_accessor :cancelled_at

    # The Unix timestamp (in seconds) for when the run failed.
    attr_accessor :failed_at

    # The Unix timestamp (in seconds) for when the run was completed.
    attr_accessor :completed_at

    attr_accessor :incomplete_details

    # The model that the [assistant](/docs/api-reference/assistants) used for this run.
    attr_accessor :model

    # The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
    attr_accessor :instructions

    # The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
    attr_accessor :tools

    attr_accessor :metadata

    attr_accessor :usage

    # The sampling temperature used for this run. If not set, defaults to 1.
    attr_accessor :temperature

    # The nucleus sampling value used for this run. If not set, defaults to 1.
    attr_accessor :top_p

    # The maximum number of prompt tokens specified to have been used over the course of the run. 
    attr_accessor :max_prompt_tokens

    # The maximum number of completion tokens specified to have been used over the course of the run. 
    attr_accessor :max_completion_tokens

    attr_accessor :truncation_strategy

    attr_accessor :tool_choice

    attr_accessor :parallel_tool_calls

    attr_accessor :response_format

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'object' => :'object',
        :'created_at' => :'created_at',
        :'thread_id' => :'thread_id',
        :'assistant_id' => :'assistant_id',
        :'status' => :'status',
        :'required_action' => :'required_action',
        :'last_error' => :'last_error',
        :'expires_at' => :'expires_at',
        :'started_at' => :'started_at',
        :'cancelled_at' => :'cancelled_at',
        :'failed_at' => :'failed_at',
        :'completed_at' => :'completed_at',
        :'incomplete_details' => :'incomplete_details',
        :'model' => :'model',
        :'instructions' => :'instructions',
        :'tools' => :'tools',
        :'metadata' => :'metadata',
        :'usage' => :'usage',
        :'temperature' => :'temperature',
        :'top_p' => :'top_p',
        :'max_prompt_tokens' => :'max_prompt_tokens',
        :'max_completion_tokens' => :'max_completion_tokens',
        :'truncation_strategy' => :'truncation_strategy',
        :'tool_choice' => :'tool_choice',
        :'parallel_tool_calls' => :'parallel_tool_calls',
        :'response_format' => :'response_format'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'object' => :'Object',
        :'created_at' => :'Object',
        :'thread_id' => :'Object',
        :'assistant_id' => :'Object',
        :'status' => :'Object',
        :'required_action' => :'Object',
        :'last_error' => :'Object',
        :'expires_at' => :'Object',
        :'started_at' => :'Object',
        :'cancelled_at' => :'Object',
        :'failed_at' => :'Object',
        :'completed_at' => :'Object',
        :'incomplete_details' => :'Object',
        :'model' => :'Object',
        :'instructions' => :'Object',
        :'tools' => :'Object',
        :'metadata' => :'Object',
        :'usage' => :'Object',
        :'temperature' => :'Object',
        :'top_p' => :'Object',
        :'max_prompt_tokens' => :'Object',
        :'max_completion_tokens' => :'Object',
        :'truncation_strategy' => :'Object',
        :'tool_choice' => :'Object',
        :'parallel_tool_calls' => :'Object',
        :'response_format' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'expires_at',
        :'started_at',
        :'cancelled_at',
        :'failed_at',
        :'completed_at',
        :'temperature',
        :'top_p',
        :'max_prompt_tokens',
        :'max_completion_tokens',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenAIClient::RunObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenAIClient::RunObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'thread_id')
        self.thread_id = attributes[:'thread_id']
      end

      if attributes.key?(:'assistant_id')
        self.assistant_id = attributes[:'assistant_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'required_action')
        self.required_action = attributes[:'required_action']
      end

      if attributes.key?(:'last_error')
        self.last_error = attributes[:'last_error']
      end

      if attributes.key?(:'expires_at')
        self.expires_at = attributes[:'expires_at']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'cancelled_at')
        self.cancelled_at = attributes[:'cancelled_at']
      end

      if attributes.key?(:'failed_at')
        self.failed_at = attributes[:'failed_at']
      end

      if attributes.key?(:'completed_at')
        self.completed_at = attributes[:'completed_at']
      end

      if attributes.key?(:'incomplete_details')
        self.incomplete_details = attributes[:'incomplete_details']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'instructions')
        self.instructions = attributes[:'instructions']
      end

      if attributes.key?(:'tools')
        if (value = attributes[:'tools']).is_a?(Array)
          self.tools = value
        end
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'usage')
        self.usage = attributes[:'usage']
      end

      if attributes.key?(:'temperature')
        self.temperature = attributes[:'temperature']
      end

      if attributes.key?(:'top_p')
        self.top_p = attributes[:'top_p']
      end

      if attributes.key?(:'max_prompt_tokens')
        self.max_prompt_tokens = attributes[:'max_prompt_tokens']
      end

      if attributes.key?(:'max_completion_tokens')
        self.max_completion_tokens = attributes[:'max_completion_tokens']
      end

      if attributes.key?(:'truncation_strategy')
        self.truncation_strategy = attributes[:'truncation_strategy']
      end

      if attributes.key?(:'tool_choice')
        self.tool_choice = attributes[:'tool_choice']
      end

      if attributes.key?(:'parallel_tool_calls')
        self.parallel_tool_calls = attributes[:'parallel_tool_calls']
      end

      if attributes.key?(:'response_format')
        self.response_format = attributes[:'response_format']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @object.nil?
        invalid_properties.push('invalid value for "object", object cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @thread_id.nil?
        invalid_properties.push('invalid value for "thread_id", thread_id cannot be nil.')
      end

      if @assistant_id.nil?
        invalid_properties.push('invalid value for "assistant_id", assistant_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @required_action.nil?
        invalid_properties.push('invalid value for "required_action", required_action cannot be nil.')
      end

      if @last_error.nil?
        invalid_properties.push('invalid value for "last_error", last_error cannot be nil.')
      end

      if @expires_at.nil?
        invalid_properties.push('invalid value for "expires_at", expires_at cannot be nil.')
      end

      if @started_at.nil?
        invalid_properties.push('invalid value for "started_at", started_at cannot be nil.')
      end

      if @cancelled_at.nil?
        invalid_properties.push('invalid value for "cancelled_at", cancelled_at cannot be nil.')
      end

      if @failed_at.nil?
        invalid_properties.push('invalid value for "failed_at", failed_at cannot be nil.')
      end

      if @completed_at.nil?
        invalid_properties.push('invalid value for "completed_at", completed_at cannot be nil.')
      end

      if @incomplete_details.nil?
        invalid_properties.push('invalid value for "incomplete_details", incomplete_details cannot be nil.')
      end

      if @model.nil?
        invalid_properties.push('invalid value for "model", model cannot be nil.')
      end

      if @instructions.nil?
        invalid_properties.push('invalid value for "instructions", instructions cannot be nil.')
      end

      if @tools.nil?
        invalid_properties.push('invalid value for "tools", tools cannot be nil.')
      end

      if @metadata.nil?
        invalid_properties.push('invalid value for "metadata", metadata cannot be nil.')
      end

      if @usage.nil?
        invalid_properties.push('invalid value for "usage", usage cannot be nil.')
      end

      if @max_prompt_tokens.nil?
        invalid_properties.push('invalid value for "max_prompt_tokens", max_prompt_tokens cannot be nil.')
      end

      if @max_completion_tokens.nil?
        invalid_properties.push('invalid value for "max_completion_tokens", max_completion_tokens cannot be nil.')
      end

      if @truncation_strategy.nil?
        invalid_properties.push('invalid value for "truncation_strategy", truncation_strategy cannot be nil.')
      end

      if @tool_choice.nil?
        invalid_properties.push('invalid value for "tool_choice", tool_choice cannot be nil.')
      end

      if @parallel_tool_calls.nil?
        invalid_properties.push('invalid value for "parallel_tool_calls", parallel_tool_calls cannot be nil.')
      end

      if @response_format.nil?
        invalid_properties.push('invalid value for "response_format", response_format cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @object.nil?
      object_validator = EnumAttributeValidator.new('Object', ['thread.run'])
      return false unless object_validator.valid?(@object)
      return false if @created_at.nil?
      return false if @thread_id.nil?
      return false if @assistant_id.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('Object', ['queued', 'in_progress', 'requires_action', 'cancelling', 'cancelled', 'failed', 'completed', 'incomplete', 'expired'])
      return false unless status_validator.valid?(@status)
      return false if @required_action.nil?
      return false if @last_error.nil?
      return false if @expires_at.nil?
      return false if @started_at.nil?
      return false if @cancelled_at.nil?
      return false if @failed_at.nil?
      return false if @completed_at.nil?
      return false if @incomplete_details.nil?
      return false if @model.nil?
      return false if @instructions.nil?
      return false if @tools.nil?
      return false if @metadata.nil?
      return false if @usage.nil?
      return false if @max_prompt_tokens.nil?
      return false if @max_completion_tokens.nil?
      return false if @truncation_strategy.nil?
      return false if @tool_choice.nil?
      return false if @parallel_tool_calls.nil?
      return false if @response_format.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('Object', ['thread.run'])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('Object', ['queued', 'in_progress', 'requires_action', 'cancelling', 'cancelled', 'failed', 'completed', 'incomplete', 'expired'])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          object == o.object &&
          created_at == o.created_at &&
          thread_id == o.thread_id &&
          assistant_id == o.assistant_id &&
          status == o.status &&
          required_action == o.required_action &&
          last_error == o.last_error &&
          expires_at == o.expires_at &&
          started_at == o.started_at &&
          cancelled_at == o.cancelled_at &&
          failed_at == o.failed_at &&
          completed_at == o.completed_at &&
          incomplete_details == o.incomplete_details &&
          model == o.model &&
          instructions == o.instructions &&
          tools == o.tools &&
          metadata == o.metadata &&
          usage == o.usage &&
          temperature == o.temperature &&
          top_p == o.top_p &&
          max_prompt_tokens == o.max_prompt_tokens &&
          max_completion_tokens == o.max_completion_tokens &&
          truncation_strategy == o.truncation_strategy &&
          tool_choice == o.tool_choice &&
          parallel_tool_calls == o.parallel_tool_calls &&
          response_format == o.response_format
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, object, created_at, thread_id, assistant_id, status, required_action, last_error, expires_at, started_at, cancelled_at, failed_at, completed_at, incomplete_details, model, instructions, tools, metadata, usage, temperature, top_p, max_prompt_tokens, max_completion_tokens, truncation_strategy, tool_choice, parallel_tool_calls, response_format].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenAIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

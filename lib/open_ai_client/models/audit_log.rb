=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

require 'date'

module OpenAIClient
  # A log of a user action or configuration change within this organization.
  class AuditLog
    # The ID of this log.
    attr_accessor :id

    attr_accessor :type

    # The Unix timestamp (in seconds) of the event.
    attr_accessor :effective_at

    attr_accessor :project

    attr_accessor :actor

    attr_accessor :api_key_created

    attr_accessor :api_key_updated

    attr_accessor :api_key_deleted

    attr_accessor :invite_sent

    attr_accessor :invite_accepted

    attr_accessor :invite_deleted

    attr_accessor :login_failed

    attr_accessor :logout_failed

    attr_accessor :organization_updated

    attr_accessor :project_created

    attr_accessor :project_updated

    attr_accessor :project_archived

    attr_accessor :rate_limit_updated

    attr_accessor :rate_limit_deleted

    attr_accessor :service_account_created

    attr_accessor :service_account_updated

    attr_accessor :service_account_deleted

    attr_accessor :user_added

    attr_accessor :user_updated

    attr_accessor :user_deleted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'type' => :'type',
        :'effective_at' => :'effective_at',
        :'project' => :'project',
        :'actor' => :'actor',
        :'api_key_created' => :'api_key.created',
        :'api_key_updated' => :'api_key.updated',
        :'api_key_deleted' => :'api_key.deleted',
        :'invite_sent' => :'invite.sent',
        :'invite_accepted' => :'invite.accepted',
        :'invite_deleted' => :'invite.deleted',
        :'login_failed' => :'login.failed',
        :'logout_failed' => :'logout.failed',
        :'organization_updated' => :'organization.updated',
        :'project_created' => :'project.created',
        :'project_updated' => :'project.updated',
        :'project_archived' => :'project.archived',
        :'rate_limit_updated' => :'rate_limit.updated',
        :'rate_limit_deleted' => :'rate_limit.deleted',
        :'service_account_created' => :'service_account.created',
        :'service_account_updated' => :'service_account.updated',
        :'service_account_deleted' => :'service_account.deleted',
        :'user_added' => :'user.added',
        :'user_updated' => :'user.updated',
        :'user_deleted' => :'user.deleted'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'type' => :'Object',
        :'effective_at' => :'Object',
        :'project' => :'Object',
        :'actor' => :'Object',
        :'api_key_created' => :'Object',
        :'api_key_updated' => :'Object',
        :'api_key_deleted' => :'Object',
        :'invite_sent' => :'Object',
        :'invite_accepted' => :'Object',
        :'invite_deleted' => :'Object',
        :'login_failed' => :'Object',
        :'logout_failed' => :'Object',
        :'organization_updated' => :'Object',
        :'project_created' => :'Object',
        :'project_updated' => :'Object',
        :'project_archived' => :'Object',
        :'rate_limit_updated' => :'Object',
        :'rate_limit_deleted' => :'Object',
        :'service_account_created' => :'Object',
        :'service_account_updated' => :'Object',
        :'service_account_deleted' => :'Object',
        :'user_added' => :'Object',
        :'user_updated' => :'Object',
        :'user_deleted' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenAIClient::AuditLog` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenAIClient::AuditLog`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'effective_at')
        self.effective_at = attributes[:'effective_at']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'actor')
        self.actor = attributes[:'actor']
      end

      if attributes.key?(:'api_key_created')
        self.api_key_created = attributes[:'api_key_created']
      end

      if attributes.key?(:'api_key_updated')
        self.api_key_updated = attributes[:'api_key_updated']
      end

      if attributes.key?(:'api_key_deleted')
        self.api_key_deleted = attributes[:'api_key_deleted']
      end

      if attributes.key?(:'invite_sent')
        self.invite_sent = attributes[:'invite_sent']
      end

      if attributes.key?(:'invite_accepted')
        self.invite_accepted = attributes[:'invite_accepted']
      end

      if attributes.key?(:'invite_deleted')
        self.invite_deleted = attributes[:'invite_deleted']
      end

      if attributes.key?(:'login_failed')
        self.login_failed = attributes[:'login_failed']
      end

      if attributes.key?(:'logout_failed')
        self.logout_failed = attributes[:'logout_failed']
      end

      if attributes.key?(:'organization_updated')
        self.organization_updated = attributes[:'organization_updated']
      end

      if attributes.key?(:'project_created')
        self.project_created = attributes[:'project_created']
      end

      if attributes.key?(:'project_updated')
        self.project_updated = attributes[:'project_updated']
      end

      if attributes.key?(:'project_archived')
        self.project_archived = attributes[:'project_archived']
      end

      if attributes.key?(:'rate_limit_updated')
        self.rate_limit_updated = attributes[:'rate_limit_updated']
      end

      if attributes.key?(:'rate_limit_deleted')
        self.rate_limit_deleted = attributes[:'rate_limit_deleted']
      end

      if attributes.key?(:'service_account_created')
        self.service_account_created = attributes[:'service_account_created']
      end

      if attributes.key?(:'service_account_updated')
        self.service_account_updated = attributes[:'service_account_updated']
      end

      if attributes.key?(:'service_account_deleted')
        self.service_account_deleted = attributes[:'service_account_deleted']
      end

      if attributes.key?(:'user_added')
        self.user_added = attributes[:'user_added']
      end

      if attributes.key?(:'user_updated')
        self.user_updated = attributes[:'user_updated']
      end

      if attributes.key?(:'user_deleted')
        self.user_deleted = attributes[:'user_deleted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @effective_at.nil?
        invalid_properties.push('invalid value for "effective_at", effective_at cannot be nil.')
      end

      if @actor.nil?
        invalid_properties.push('invalid value for "actor", actor cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @type.nil?
      return false if @effective_at.nil?
      return false if @actor.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          effective_at == o.effective_at &&
          project == o.project &&
          actor == o.actor &&
          api_key_created == o.api_key_created &&
          api_key_updated == o.api_key_updated &&
          api_key_deleted == o.api_key_deleted &&
          invite_sent == o.invite_sent &&
          invite_accepted == o.invite_accepted &&
          invite_deleted == o.invite_deleted &&
          login_failed == o.login_failed &&
          logout_failed == o.logout_failed &&
          organization_updated == o.organization_updated &&
          project_created == o.project_created &&
          project_updated == o.project_updated &&
          project_archived == o.project_archived &&
          rate_limit_updated == o.rate_limit_updated &&
          rate_limit_deleted == o.rate_limit_deleted &&
          service_account_created == o.service_account_created &&
          service_account_updated == o.service_account_updated &&
          service_account_deleted == o.service_account_deleted &&
          user_added == o.user_added &&
          user_updated == o.user_updated &&
          user_deleted == o.user_deleted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, type, effective_at, project, actor, api_key_created, api_key_updated, api_key_deleted, invite_sent, invite_accepted, invite_deleted, login_failed, logout_failed, organization_updated, project_created, project_updated, project_archived, rate_limit_updated, rate_limit_deleted, service_account_created, service_account_updated, service_account_deleted, user_added, user_updated, user_deleted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenAIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

require 'date'

module OpenAIClient
  class TranscriptionSegment
    # Unique identifier of the segment.
    attr_accessor :id

    # Seek offset of the segment.
    attr_accessor :seek

    # Start time of the segment in seconds.
    attr_accessor :start

    # End time of the segment in seconds.
    attr_accessor :_end

    # Text content of the segment.
    attr_accessor :text

    # Array of token IDs for the text content.
    attr_accessor :tokens

    # Temperature parameter used for generating the segment.
    attr_accessor :temperature

    # Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
    attr_accessor :avg_logprob

    # Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
    attr_accessor :compression_ratio

    # Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
    attr_accessor :no_speech_prob

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'seek' => :'seek',
        :'start' => :'start',
        :'_end' => :'end',
        :'text' => :'text',
        :'tokens' => :'tokens',
        :'temperature' => :'temperature',
        :'avg_logprob' => :'avg_logprob',
        :'compression_ratio' => :'compression_ratio',
        :'no_speech_prob' => :'no_speech_prob'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'seek' => :'Object',
        :'start' => :'Object',
        :'_end' => :'Object',
        :'text' => :'Object',
        :'tokens' => :'Object',
        :'temperature' => :'Object',
        :'avg_logprob' => :'Object',
        :'compression_ratio' => :'Object',
        :'no_speech_prob' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenAIClient::TranscriptionSegment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenAIClient::TranscriptionSegment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'seek')
        self.seek = attributes[:'seek']
      end

      if attributes.key?(:'start')
        self.start = attributes[:'start']
      end

      if attributes.key?(:'_end')
        self._end = attributes[:'_end']
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'tokens')
        if (value = attributes[:'tokens']).is_a?(Array)
          self.tokens = value
        end
      end

      if attributes.key?(:'temperature')
        self.temperature = attributes[:'temperature']
      end

      if attributes.key?(:'avg_logprob')
        self.avg_logprob = attributes[:'avg_logprob']
      end

      if attributes.key?(:'compression_ratio')
        self.compression_ratio = attributes[:'compression_ratio']
      end

      if attributes.key?(:'no_speech_prob')
        self.no_speech_prob = attributes[:'no_speech_prob']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @seek.nil?
        invalid_properties.push('invalid value for "seek", seek cannot be nil.')
      end

      if @start.nil?
        invalid_properties.push('invalid value for "start", start cannot be nil.')
      end

      if @_end.nil?
        invalid_properties.push('invalid value for "_end", _end cannot be nil.')
      end

      if @text.nil?
        invalid_properties.push('invalid value for "text", text cannot be nil.')
      end

      if @tokens.nil?
        invalid_properties.push('invalid value for "tokens", tokens cannot be nil.')
      end

      if @temperature.nil?
        invalid_properties.push('invalid value for "temperature", temperature cannot be nil.')
      end

      if @avg_logprob.nil?
        invalid_properties.push('invalid value for "avg_logprob", avg_logprob cannot be nil.')
      end

      if @compression_ratio.nil?
        invalid_properties.push('invalid value for "compression_ratio", compression_ratio cannot be nil.')
      end

      if @no_speech_prob.nil?
        invalid_properties.push('invalid value for "no_speech_prob", no_speech_prob cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @seek.nil?
      return false if @start.nil?
      return false if @_end.nil?
      return false if @text.nil?
      return false if @tokens.nil?
      return false if @temperature.nil?
      return false if @avg_logprob.nil?
      return false if @compression_ratio.nil?
      return false if @no_speech_prob.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          seek == o.seek &&
          start == o.start &&
          _end == o._end &&
          text == o.text &&
          tokens == o.tokens &&
          temperature == o.temperature &&
          avg_logprob == o.avg_logprob &&
          compression_ratio == o.compression_ratio &&
          no_speech_prob == o.no_speech_prob
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, seek, start, _end, text, tokens, temperature, avg_logprob, compression_ratio, no_speech_prob].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenAIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

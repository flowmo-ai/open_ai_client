=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

require 'date'

module OpenAIClient
  # The response resource.
  class RealtimeResponse
    # The unique ID of the response.
    attr_accessor :id

    # The object type, must be `realtime.response`.
    attr_accessor :object

    # The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
    attr_accessor :status

    attr_accessor :status_details

    # The list of output items generated by the response.
    attr_accessor :output

    attr_accessor :metadata

    attr_accessor :usage

    # Which conversation the response is added to, determined by the `conversation` field in the `response.create` event. If `auto`, the response will be added to the default conversation and the value of `conversation_id` will be an id like `conv_1234`. If `none`, the response will not be added to any conversation and the value of `conversation_id` will be `null`. If responses are being triggered by server VAD, the response will be added to the default conversation, thus the `conversation_id` will be an id like `conv_1234`. 
    attr_accessor :conversation_id

    # The voice the model used to respond. Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`,  `shimmer` and `verse`. 
    attr_accessor :voice

    # The set of modalities the model used to respond. If there are multiple modalities, the model will pick one, for example if `modalities` is `[\"text\", \"audio\"]`, the model could be responding in either text or audio. 
    attr_accessor :modalities

    # The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
    attr_accessor :output_audio_format

    # Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. 
    attr_accessor :temperature

    # Maximum number of output tokens for a single assistant response, inclusive of tool calls, that was used in this response. 
    attr_accessor :max_output_tokens

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'object' => :'object',
        :'status' => :'status',
        :'status_details' => :'status_details',
        :'output' => :'output',
        :'metadata' => :'metadata',
        :'usage' => :'usage',
        :'conversation_id' => :'conversation_id',
        :'voice' => :'voice',
        :'modalities' => :'modalities',
        :'output_audio_format' => :'output_audio_format',
        :'temperature' => :'temperature',
        :'max_output_tokens' => :'max_output_tokens'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'object' => :'Object',
        :'status' => :'Object',
        :'status_details' => :'Object',
        :'output' => :'Object',
        :'metadata' => :'Object',
        :'usage' => :'Object',
        :'conversation_id' => :'Object',
        :'voice' => :'Object',
        :'modalities' => :'Object',
        :'output_audio_format' => :'Object',
        :'temperature' => :'Object',
        :'max_output_tokens' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenAIClient::RealtimeResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenAIClient::RealtimeResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_details')
        self.status_details = attributes[:'status_details']
      end

      if attributes.key?(:'output')
        if (value = attributes[:'output']).is_a?(Array)
          self.output = value
        end
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'usage')
        self.usage = attributes[:'usage']
      end

      if attributes.key?(:'conversation_id')
        self.conversation_id = attributes[:'conversation_id']
      end

      if attributes.key?(:'voice')
        self.voice = attributes[:'voice']
      end

      if attributes.key?(:'modalities')
        if (value = attributes[:'modalities']).is_a?(Array)
          self.modalities = value
        end
      end

      if attributes.key?(:'output_audio_format')
        self.output_audio_format = attributes[:'output_audio_format']
      end

      if attributes.key?(:'temperature')
        self.temperature = attributes[:'temperature']
      end

      if attributes.key?(:'max_output_tokens')
        self.max_output_tokens = attributes[:'max_output_tokens']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      object_validator = EnumAttributeValidator.new('Object', ['realtime.response'])
      return false unless object_validator.valid?(@object)
      status_validator = EnumAttributeValidator.new('Object', ['completed', 'cancelled', 'failed', 'incomplete'])
      return false unless status_validator.valid?(@status)
      voice_validator = EnumAttributeValidator.new('Object', ['alloy', 'ash', 'ballad', 'coral', 'echo', 'sage', 'shimmer', 'verse'])
      return false unless voice_validator.valid?(@voice)
      output_audio_format_validator = EnumAttributeValidator.new('Object', ['pcm16', 'g711_ulaw', 'g711_alaw'])
      return false unless output_audio_format_validator.valid?(@output_audio_format)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('Object', ['realtime.response'])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('Object', ['completed', 'cancelled', 'failed', 'incomplete'])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] voice Object to be assigned
    def voice=(voice)
      validator = EnumAttributeValidator.new('Object', ['alloy', 'ash', 'ballad', 'coral', 'echo', 'sage', 'shimmer', 'verse'])
      unless validator.valid?(voice)
        fail ArgumentError, "invalid value for \"voice\", must be one of #{validator.allowable_values}."
      end
      @voice = voice
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] output_audio_format Object to be assigned
    def output_audio_format=(output_audio_format)
      validator = EnumAttributeValidator.new('Object', ['pcm16', 'g711_ulaw', 'g711_alaw'])
      unless validator.valid?(output_audio_format)
        fail ArgumentError, "invalid value for \"output_audio_format\", must be one of #{validator.allowable_values}."
      end
      @output_audio_format = output_audio_format
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          object == o.object &&
          status == o.status &&
          status_details == o.status_details &&
          output == o.output &&
          metadata == o.metadata &&
          usage == o.usage &&
          conversation_id == o.conversation_id &&
          voice == o.voice &&
          modalities == o.modalities &&
          output_audio_format == o.output_audio_format &&
          temperature == o.temperature &&
          max_output_tokens == o.max_output_tokens
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, object, status, status_details, output, metadata, usage, conversation_id, voice, modalities, output_audio_format, temperature, max_output_tokens].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenAIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

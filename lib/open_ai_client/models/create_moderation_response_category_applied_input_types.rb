=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

require 'date'

module OpenAIClient
  # A list of the categories along with the input type(s) that the score applies to.
  class CreateModerationResponseCategoryAppliedInputTypes
    # The applied input type(s) for the category 'hate'.
    attr_accessor :hate

    # The applied input type(s) for the category 'hate/threatening'.
    attr_accessor :hatethreatening

    # The applied input type(s) for the category 'harassment'.
    attr_accessor :harassment

    # The applied input type(s) for the category 'harassment/threatening'.
    attr_accessor :harassmentthreatening

    # The applied input type(s) for the category 'illicit'.
    attr_accessor :illicit

    # The applied input type(s) for the category 'illicit/violent'.
    attr_accessor :illicitviolent

    # The applied input type(s) for the category 'self-harm'.
    attr_accessor :self_harm

    # The applied input type(s) for the category 'self-harm/intent'.
    attr_accessor :self_harmintent

    # The applied input type(s) for the category 'self-harm/instructions'.
    attr_accessor :self_harminstructions

    # The applied input type(s) for the category 'sexual'.
    attr_accessor :sexual

    # The applied input type(s) for the category 'sexual/minors'.
    attr_accessor :sexualminors

    # The applied input type(s) for the category 'violence'.
    attr_accessor :violence

    # The applied input type(s) for the category 'violence/graphic'.
    attr_accessor :violencegraphic

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'hate' => :'hate',
        :'hatethreatening' => :'hate/threatening',
        :'harassment' => :'harassment',
        :'harassmentthreatening' => :'harassment/threatening',
        :'illicit' => :'illicit',
        :'illicitviolent' => :'illicit/violent',
        :'self_harm' => :'self-harm',
        :'self_harmintent' => :'self-harm/intent',
        :'self_harminstructions' => :'self-harm/instructions',
        :'sexual' => :'sexual',
        :'sexualminors' => :'sexual/minors',
        :'violence' => :'violence',
        :'violencegraphic' => :'violence/graphic'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'hate' => :'Object',
        :'hatethreatening' => :'Object',
        :'harassment' => :'Object',
        :'harassmentthreatening' => :'Object',
        :'illicit' => :'Object',
        :'illicitviolent' => :'Object',
        :'self_harm' => :'Object',
        :'self_harmintent' => :'Object',
        :'self_harminstructions' => :'Object',
        :'sexual' => :'Object',
        :'sexualminors' => :'Object',
        :'violence' => :'Object',
        :'violencegraphic' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenAIClient::CreateModerationResponseCategoryAppliedInputTypes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenAIClient::CreateModerationResponseCategoryAppliedInputTypes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'hate')
        if (value = attributes[:'hate']).is_a?(Array)
          self.hate = value
        end
      end

      if attributes.key?(:'hatethreatening')
        if (value = attributes[:'hatethreatening']).is_a?(Array)
          self.hatethreatening = value
        end
      end

      if attributes.key?(:'harassment')
        if (value = attributes[:'harassment']).is_a?(Array)
          self.harassment = value
        end
      end

      if attributes.key?(:'harassmentthreatening')
        if (value = attributes[:'harassmentthreatening']).is_a?(Array)
          self.harassmentthreatening = value
        end
      end

      if attributes.key?(:'illicit')
        if (value = attributes[:'illicit']).is_a?(Array)
          self.illicit = value
        end
      end

      if attributes.key?(:'illicitviolent')
        if (value = attributes[:'illicitviolent']).is_a?(Array)
          self.illicitviolent = value
        end
      end

      if attributes.key?(:'self_harm')
        if (value = attributes[:'self_harm']).is_a?(Array)
          self.self_harm = value
        end
      end

      if attributes.key?(:'self_harmintent')
        if (value = attributes[:'self_harmintent']).is_a?(Array)
          self.self_harmintent = value
        end
      end

      if attributes.key?(:'self_harminstructions')
        if (value = attributes[:'self_harminstructions']).is_a?(Array)
          self.self_harminstructions = value
        end
      end

      if attributes.key?(:'sexual')
        if (value = attributes[:'sexual']).is_a?(Array)
          self.sexual = value
        end
      end

      if attributes.key?(:'sexualminors')
        if (value = attributes[:'sexualminors']).is_a?(Array)
          self.sexualminors = value
        end
      end

      if attributes.key?(:'violence')
        if (value = attributes[:'violence']).is_a?(Array)
          self.violence = value
        end
      end

      if attributes.key?(:'violencegraphic')
        if (value = attributes[:'violencegraphic']).is_a?(Array)
          self.violencegraphic = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @hate.nil?
        invalid_properties.push('invalid value for "hate", hate cannot be nil.')
      end

      if @hatethreatening.nil?
        invalid_properties.push('invalid value for "hatethreatening", hatethreatening cannot be nil.')
      end

      if @harassment.nil?
        invalid_properties.push('invalid value for "harassment", harassment cannot be nil.')
      end

      if @harassmentthreatening.nil?
        invalid_properties.push('invalid value for "harassmentthreatening", harassmentthreatening cannot be nil.')
      end

      if @illicit.nil?
        invalid_properties.push('invalid value for "illicit", illicit cannot be nil.')
      end

      if @illicitviolent.nil?
        invalid_properties.push('invalid value for "illicitviolent", illicitviolent cannot be nil.')
      end

      if @self_harm.nil?
        invalid_properties.push('invalid value for "self_harm", self_harm cannot be nil.')
      end

      if @self_harmintent.nil?
        invalid_properties.push('invalid value for "self_harmintent", self_harmintent cannot be nil.')
      end

      if @self_harminstructions.nil?
        invalid_properties.push('invalid value for "self_harminstructions", self_harminstructions cannot be nil.')
      end

      if @sexual.nil?
        invalid_properties.push('invalid value for "sexual", sexual cannot be nil.')
      end

      if @sexualminors.nil?
        invalid_properties.push('invalid value for "sexualminors", sexualminors cannot be nil.')
      end

      if @violence.nil?
        invalid_properties.push('invalid value for "violence", violence cannot be nil.')
      end

      if @violencegraphic.nil?
        invalid_properties.push('invalid value for "violencegraphic", violencegraphic cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @hate.nil?
      return false if @hatethreatening.nil?
      return false if @harassment.nil?
      return false if @harassmentthreatening.nil?
      return false if @illicit.nil?
      return false if @illicitviolent.nil?
      return false if @self_harm.nil?
      return false if @self_harmintent.nil?
      return false if @self_harminstructions.nil?
      return false if @sexual.nil?
      return false if @sexualminors.nil?
      return false if @violence.nil?
      return false if @violencegraphic.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          hate == o.hate &&
          hatethreatening == o.hatethreatening &&
          harassment == o.harassment &&
          harassmentthreatening == o.harassmentthreatening &&
          illicit == o.illicit &&
          illicitviolent == o.illicitviolent &&
          self_harm == o.self_harm &&
          self_harmintent == o.self_harmintent &&
          self_harminstructions == o.self_harminstructions &&
          sexual == o.sexual &&
          sexualminors == o.sexualminors &&
          violence == o.violence &&
          violencegraphic == o.violencegraphic
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [hate, hatethreatening, harassment, harassmentthreatening, illicit, illicitviolent, self_harm, self_harmintent, self_harminstructions, sexual, sexualminors, violence, violencegraphic].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenAIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

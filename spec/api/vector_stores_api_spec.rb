=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

require 'spec_helper'
require 'json'

# Unit tests for OpenAIClient::VectorStoresApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'VectorStoresApi' do
  before do
    # run before each test
    @instance = OpenAIClient::VectorStoresApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VectorStoresApi' do
    it 'should create an instance of VectorStoresApi' do
      expect(@instance).to be_instance_of(OpenAIClient::VectorStoresApi)
    end
  end

  # unit tests for cancel_vector_store_file_batch
  # Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
  # @param vector_store_id The ID of the vector store that the file batch belongs to.
  # @param batch_id The ID of the file batch to cancel.
  # @param [Hash] opts the optional parameters
  # @return [VectorStoreFileBatchObject]
  describe 'cancel_vector_store_file_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_vector_store
  # Create a vector store.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [VectorStoreObject]
  describe 'create_vector_store test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_vector_store_file
  # Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
  # @param body 
  # @param vector_store_id The ID of the vector store for which to create a File. 
  # @param [Hash] opts the optional parameters
  # @return [VectorStoreFileObject]
  describe 'create_vector_store_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_vector_store_file_batch
  # Create a vector store file batch.
  # @param body 
  # @param vector_store_id The ID of the vector store for which to create a File Batch. 
  # @param [Hash] opts the optional parameters
  # @return [VectorStoreFileBatchObject]
  describe 'create_vector_store_file_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_vector_store
  # Delete a vector store.
  # @param vector_store_id The ID of the vector store to delete.
  # @param [Hash] opts the optional parameters
  # @return [DeleteVectorStoreResponse]
  describe 'delete_vector_store test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_vector_store_file
  # Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
  # @param vector_store_id The ID of the vector store that the file belongs to.
  # @param file_id The ID of the file to delete.
  # @param [Hash] opts the optional parameters
  # @return [DeleteVectorStoreFileResponse]
  describe 'delete_vector_store_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_vector_store
  # Retrieves a vector store.
  # @param vector_store_id The ID of the vector store to retrieve.
  # @param [Hash] opts the optional parameters
  # @return [VectorStoreObject]
  describe 'get_vector_store test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_vector_store_file
  # Retrieves a vector store file.
  # @param vector_store_id The ID of the vector store that the file belongs to.
  # @param file_id The ID of the file being retrieved.
  # @param [Hash] opts the optional parameters
  # @return [VectorStoreFileObject]
  describe 'get_vector_store_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_vector_store_file_batch
  # Retrieves a vector store file batch.
  # @param vector_store_id The ID of the vector store that the file batch belongs to.
  # @param batch_id The ID of the file batch being retrieved.
  # @param [Hash] opts the optional parameters
  # @return [VectorStoreFileBatchObject]
  describe 'get_vector_store_file_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_files_in_vector_store_batch
  # Returns a list of vector store files in a batch.
  # @param vector_store_id The ID of the vector store that the files belong to.
  # @param batch_id The ID of the file batch that the files belong to.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
  # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
  # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  # @option opts [String] :filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.
  # @return [ListVectorStoreFilesResponse]
  describe 'list_files_in_vector_store_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_vector_store_files
  # Returns a list of vector store files.
  # @param vector_store_id The ID of the vector store that the files belong to.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
  # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
  # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  # @option opts [String] :filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;.
  # @return [ListVectorStoreFilesResponse]
  describe 'list_vector_store_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_vector_stores
  # Returns a list of vector stores.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. 
  # @option opts [String] :order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order. 
  # @option opts [String] :after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. 
  # @option opts [String] :before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list. 
  # @return [ListVectorStoresResponse]
  describe 'list_vector_stores test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modify_vector_store
  # Modifies a vector store.
  # @param body 
  # @param vector_store_id The ID of the vector store to modify.
  # @param [Hash] opts the optional parameters
  # @return [VectorStoreObject]
  describe 'modify_vector_store test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
